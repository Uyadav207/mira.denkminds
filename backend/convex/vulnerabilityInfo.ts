import { query, mutation } from "./_generated/server";
import { v } from "convex/values";

export const fetchVulnerabilityInfoByVId = query({
	args: {
		vulnerabilityId: v.id("vulnerabilities"),
	},
	handler: async (ctx, { vulnerabilityId }) => {
		const vulnerabilityInfo = await ctx.db
			.query("vulnerabilityInfo")
			.withIndex("by_vulnerabilityId", (q) =>
				q.eq("vulnerabilityId", vulnerabilityId),
			)
			.collect();
		return vulnerabilityInfo;
	},
});

export const saveVulnerabilityInfo = mutation({
	args: {
		vulnerabilityId: v.id("vulnerabilities"),
		riskLevel: v.string(),
		cweId: v.string(),
		cveIds: v.array(v.string()),
		description: v.string(),
		affectedUrls: v.array(
			v.object({
				uri: v.string(),
				method: v.string(),
				attack: v.string(),
				evidence: v.string(),
			}),
		),
		solution: v.string(),
		confidence: v.string(),
		reference: v.string(),
	},
	handler: async (
		ctx,
		{
			vulnerabilityId,
			riskLevel,
			cweId,
			cveIds,
			description,
			affectedUrls,
			solution,
			confidence,
			reference,
		},
	) => {
		const infoId = await ctx.db.insert("vulnerabilityInfo", {
			vulnerabilityId,
			riskLevel,
			cweId,
			cveIds,
			description,
			affectedUrls,
			solution,
			confidence,
			reference,
		});

		return { infoId };
	},
});

export const fetchUrlsAndRiskByScanId = query({
	args: {
		scanId: v.id("scans"),
	},
	handler: async (ctx, { scanId }) => {
		const vulnerabilities = await ctx.db
			.query("vulnerabilities")
			.withIndex("by_scanId", (q) => q.eq("scanId", scanId))
			.collect();

		const vulnerabilityIds = vulnerabilities.map((vuln) => vuln._id);

		const vulnerabilityInfos = await Promise.all(
			vulnerabilityIds.map((vulnerabilityId) =>
				ctx.db
					.query("vulnerabilityInfo")
					.withIndex("by_vulnerabilityId", (q) =>
						q.eq("vulnerabilityId", vulnerabilityId),
					)
					.collect(),
			),
		);
		const urlsWithRisk = vulnerabilityInfos.flatMap((infoList) =>
			infoList.flatMap((info) =>
				info.affectedUrls.map((urlObj) => ({
					url: urlObj.uri,
					riskLevel: info.riskLevel,
				})),
			),
		);

		return urlsWithRisk;
	},
});
