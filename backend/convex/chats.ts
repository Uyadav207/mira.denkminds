import { mutation, query } from "./_generated/server";
import { v } from "convex/values";

// Save a Chat Message
export const saveChatMessage = mutation({
	args: {
		chatId: v.id("chats"), // ID of the chat
		humanInTheLoopId: v.string(), // ID of the HumanInTheLoopChat
		sender: v.union(v.literal("user"), v.literal("ai")), // Sender type
		message: v.string(), // Message content
	},
	handler: async (ctx, { chatId, humanInTheLoopId, sender, message }) => {
		const now = Date.now();

		// Insert the chat message into the chatHistory table
		const result = await ctx.db.insert("chatHistory", {
			chatId,
			humanInTheLoopId,
			sender,
			message,
			createdAt: now,
		});

		// Update the `chats` table with the last updated timestamp
		await ctx.db.patch(chatId, { updatedAt: now });

		return result; // Return the inserted message ID
	},
});

// Get Chat History
export const getChatHistory = query({
	args: { chatId: v.optional(v.id("chats")) }, // ID of the chat
	handler: async (ctx, { chatId }) => {
		// Query the chatHistory table by chatId
		if (chatId) {
			const chatHistory = await ctx.db
				.query("chatHistory")
				.withIndex("by_chatId", (q) => q.eq("chatId", chatId))
				.collect();

			return chatHistory; // Return the chat history
		}
		return []; // Return empty chat history
	},
});

// Save a Chat
export const saveChat = mutation({
	args: {
		userId: v.string(), // External userId (as string, not v.id)
		title: v.string(), // Title of the chat
	},
	handler: async (ctx, { userId, title }) => {
		const now = Date.now(); // Timestamp for creation

		// Insert a new chat entry into the chats table
		const chatId = await ctx.db.insert("chats", {
			userId, // Use the external userId string
			title,
			createdAt: now,
			updatedAt: now,
		});

		// Return the autogenerated chatId
		return chatId;
	},
});

// Get chats by userId
export const getChatsByUserId = query({
	args: {
		userId: v.string(), // External userId (as string, not v.id)
	},
	handler: async (ctx, { userId }) => {
		// Query the chats table for chats matching the userId
		const chats = await ctx.db
			.query("chats")
			.withIndex("by_userId", (q) => q.eq("userId", userId))
			.collect();

		// Return the retrieved chats
		return chats;
	},
});
