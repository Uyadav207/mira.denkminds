import type React from "react";
import { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Visualiser } from "./Visualiser";

type Vulnerability = {
	vulnId: string;
	title: string;
	severity: "Critical" | "High" | "Medium" | "Low" | "Information";
	count: number;
};

const Vulnerability: React.FC = () => {
	const { scanId } = useParams<{ scanId: string }>();
	const navigate = useNavigate();
	const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
	const [loading, setLoading] = useState(true);

	// biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>
	useEffect(() => {
		const fetchVulnerabilities = async () => {
			setLoading(true);

			// Replace with your actual API logic
			const mockData: Vulnerability[] = [
				{
					title: "Clickjacking",
					severity: "Medium",
					count: 16,
					vulnId: "1",
				},
				{
					vulnId: "2",
					title: "Content Security Policy Not Implemented",
					severity: "High",
					count: 40,
				},
				{
					title: "Reveal Server Hosted Software Running Information",
					severity: "Low",
					count: 40,
					vulnId: "3",
				},
				{
					title: "X-Content-Type-Options Header Missing",
					severity: "Low",
					count: 40,
					vulnId: "4",
				},
				{
					title: "External Resources",
					severity: "Information",
					count: 4,
					vulnId: "5",
				},
			];

			// Simulate API call
			setTimeout(() => {
				setVulnerabilities(mockData);
				setLoading(false);
			}, 1000);
		};

		fetchVulnerabilities();
	}, [scanId]);

	if (loading) {
		return (
			<div className="rounded-lg p-8 border">
				<div className="flex items-center justify-between space-x-4 mb-4">
					<div className="w-32 h-4 bg-secondary rounded animate-pulse" />
				</div>

				{/* Legend Skeleton */}
				<div className="flex space-x-4 mb-6">
					{Array.from({ length: 5 }).map((_, index) => (
						// biome-ignore lint/style/useSelfClosingElements: <explanation>
						<div
							// biome-ignore lint/suspicious/noArrayIndexKey: <explanation>
							key={index}
							className="px-3 py-1 rounded text-xs font-semibold bg-secondary w-36 h-6 animate-pulse"
						></div>
					))}
				</div>

				{/* Vulnerability Skeleton */}
				<div className="space-y-4">
					{Array.from({ length: 5 }).map((_, index) => (
						<div
							// biome-ignore lint/suspicious/noArrayIndexKey: <explanation>
							key={index}
							className="flex justify-between items-center py-4 px-3 rounded-sm border-b animate-pulse"
						>
							<div className="w-2/3">
								<div className="h-4 bg-secondary rounded w-3/4 mb-2" />
								<div className="h-4 bg-secondary rounded w-1/2" />
							</div>
							<div className="w-9 h-9 bg-secondary rounded-full" />
						</div>
					))}
				</div>
			</div>
		);
	}

	// Hardcoded totals for each severity (We have to adjust it accordingly through api calls)
	const severityTotals = {
		Critical: 5,
		High: 3,
		Medium: 6,
		Low: 8,
		Information: 2,
	};

	return (
		<>
			<div className="rounded-lg p-8 border bg-sidebar">
				<div className="flex items-center justify-between space-x-4 mb-4">
					<button
						type="button"
						className="mb-4"
						onClick={() => navigate(-1)}
					>
						‚Üê All Vulnerabilities
					</button>

					{/* Legend */}
					<div className="flex space-x-4 mb-6">
						<div className="flex items-center">
							<p className="px-3 py-1 rounded text-xs font-semibold text-white bg-red-600">
								Critical ({severityTotals.Critical})
							</p>
						</div>
						<div className="flex items-center">
							<p className="px-3 py-1 rounded text-xs font-semibold text-white bg-orange-600">
								High ({severityTotals.High})
							</p>
						</div>
						<div className="flex items-center">
							<p className="px-3 py-1 rounded text-xs font-semibold text-white bg-purple-500">
								Medium ({severityTotals.Medium})
							</p>
						</div>
						<div className="flex items-center">
							<p className="px-3 py-1 rounded text-xs font-semibold text-white bg-yellow-500">
								Low ({severityTotals.Low})
							</p>
						</div>
						<div className="flex items-center">
							<p className="px-3 py-1 rounded text-xs font-semibold text-white bg-blue-500">
								Information ({severityTotals.Information})
							</p>
						</div>
					</div>
				</div>
				{/* Vulnerabilities List */}
				<div className="space-y-0">
					{vulnerabilities.map((vuln) => (
						// biome-ignore lint/a11y/useKeyWithClickEvents: <explanation>
						<div
							key={vuln.vulnId}
							className="flex justify-between items-center py-4 px-3 rounded-sm cursor-pointer border-b last:border-none"
							onClick={() =>
								navigate(
									`/recent-scan/${scanId}/vulnerability/${vuln.vulnId}`,
								)
							}
						>
							<div>
								<h3 className="hover:underline">
									{vuln.title}
								</h3>
							</div>
							<div className="flex items-center space-x-3">
								<span className="w-9 h-9 flex items-center justify-center rounded-full bg-secondary font-medium">
									{vuln.count}
								</span>
							</div>
						</div>
					))}
				</div>
			</div>
			<Visualiser />
		</>
	);
};

export default Vulnerability;
