import type React from "react";
import { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { useQuery } from "convex/react";
import { api } from "../../convex/_generated/api";
import { Visualiser } from "./Visualiser";
import useStore from "../../store/store";
import { Button } from "../ui/button";

type Vulnerability = {
	_id: string;
	alert: string;
	_creationTime: string;
	AffectedUrisCount: string;
	riskDesc: string;
	scanId: string;
};

const Vulnerability: React.FC = () => {
	const { scanId } = useParams<{ scanId: string }>();
	const navigate = useNavigate();
	const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
	const [loading, setLoading] = useState(true);
	const [currentPage, setCurrentPage] = useState(1);
	const itemsPerPage = 5;

	const user = useStore((state) => state.user);
	if (!user) {
		return null;
	}

	const vulnerabilitiesData = useQuery(
		api.vulnerabilities.fetchVulnerabilityByScanId,
		{
			scanId,
		},
	);

	const scanData = useQuery(api.scans.fetchTotalRisksByScanId, {
		scanId: scanId,
	});

	useEffect(() => {
		if (vulnerabilitiesData) {
			setVulnerabilities(vulnerabilitiesData);
			setLoading(false);
		} else {
			setLoading(true);
		}
	}, [vulnerabilitiesData]);

	const totalPages = Math.ceil(vulnerabilities.length / itemsPerPage);
	const currentData = vulnerabilities.slice(
		(currentPage - 1) * itemsPerPage,
		currentPage * itemsPerPage,
	);

	const handleNextPage = () => {
		if (currentPage < totalPages) {
			setCurrentPage(currentPage + 1);
		}
	};

	const handlePreviousPage = () => {
		if (currentPage > 1) {
			setCurrentPage(currentPage - 1);
		}
	};

	if (loading) {
		return (
			<div className="rounded-lg p-8 border">
				{/* Skeleton loading */}
				<div className="space-y-4">
					{Array.from({ length: 5 }).map((_, index) => (
						<div
							// biome-ignore lint/suspicious/noArrayIndexKey: <explanation>
							key={index}
							className="flex justify-between items-center py-4 px-3 rounded-sm border-b animate-pulse"
						>
							<div className="w-2/3">
								<div className="h-4 bg-secondary rounded w-3/4 mb-2" />
								<div className="h-4 bg-secondary rounded w-1/2" />
							</div>
							<div className="w-9 h-9 bg-secondary rounded-full" />
						</div>
					))}
				</div>
			</div>
		);
	}

	return (
		<>
			<div className="rounded-lg p-8 border bg-sidebar">
				<div className="flex items-center justify-between space-x-4 mb-4">
					<button
						type="button"
						className="mb-4"
						onClick={() => navigate(-1)}
					>
						‚Üê All Vulnerabilities
					</button>

					<div className="flex space-x-4 mb-6">
						<div className="flex items-center">
							<p className="px-3 py-1 rounded text-xs font-semibold text-white bg-red-600">
								Critical ({scanData?.Critical || 0})
							</p>
						</div>
						<div className="flex items-center">
							<p className="px-3 py-1 rounded text-xs font-semibold text-white bg-orange-600">
								High ({scanData?.High || 0})
							</p>
						</div>
						<div className="flex items-center">
							<p className="px-3 py-1 rounded text-xs font-semibold text-white bg-purple-500">
								Medium ({scanData?.Medium || 0})
							</p>
						</div>
						<div className="flex items-center">
							<p className="px-3 py-1 rounded text-xs font-semibold text-white bg-yellow-500">
								Low ({scanData?.Low || 0})
							</p>
						</div>
						<div className="flex items-center">
							<p className="px-3 py-1 rounded text-xs font-semibold text-white bg-blue-500">
								Information ({scanData?.Informational || 0})
							</p>
						</div>
					</div>
				</div>

				{/* Vulnerabilities List */}
				<div className="space-y-0">
					{currentData.map((vuln) => (
						// biome-ignore lint/a11y/useKeyWithClickEvents: <explanation>
						<div
							key={vuln._id}
							className="flex justify-between items-center py-4 px-3 rounded-sm cursor-pointer border-b last:border-none"
							onClick={() =>
								navigate(
									`/recent-scan/${scanId}/vulnerability/${vuln._id}`,
								)
							}
						>
							<div>
								<h3 className="text-[#7156DB] hover:underline">
									{vuln.alert}
								</h3>
							</div>
							<div className="flex items-center space-x-3">
								<span className="w-9 h-9 flex items-center justify-center rounded-full bg-secondary font-medium">
									{vuln.AffectedUrisCount}
								</span>
							</div>
						</div>
					))}
				</div>

				{/* Pagination Controller */}
				<div className="flex justify-center space-x-1 mt-6">
					<Button
						className="bg-secondary border border-secondary text-[#7156DB] hover:bg-sidebar w-1/6 shadow-none"
						onClick={handlePreviousPage}
						disabled={currentPage === 1}
					>
						Previous
					</Button>
					<Button
						className="bg-secondary border border-secondary text-[#7156DB] hover:bg- shadow-none w-1/6"
						onClick={handleNextPage}
						disabled={currentPage === totalPages}
					>
						Next
					</Button>
				</div>
			</div>

			<Visualiser />
		</>
	);
};

export default Vulnerability;
