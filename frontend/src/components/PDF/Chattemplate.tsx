import { useRef, useEffect, useState } from "react";
import { Button } from "@components/ui/button";
import { useReactToPrint } from "react-to-print";
import { useQuery } from "convex/react";
// biome-ignore lint/style/useImportType: <explanation>
import { Id } from "../../convex/_generated/dataModel";
import { api } from "../../convex/_generated/api";
import { useNavigate, useParams } from "react-router-dom";
import { ArrowLeft } from "lucide-react";
import { Card, CardContent } from "../ui/card";
import useStore from "../../store/store";
import Logo from "../../../public/Mira_logo.png";

type Summary = {
	_id: Id<"summaries">;
	title: string;
	content: string;
	createdAt: string;
};

export function ChatTemplate() {
	const { _id } = useParams<{ _id: string }>();
	const templateRef = useRef<HTMLDivElement>(null);
	const [chatSummary, setChatSummary] = useState<Summary | null>(null);
	// const [isPrinting, setIsPrinting] = useState(false);
	const user = useStore((state) => state.user);

	if (!user) return null;

	const fetchedSummary = useQuery(api.summaries.getSummariesByUserId, {
		userId: String(user.id),
	}) as Summary[];

	const navigate = useNavigate();
	// const { chatReportId } = useParams<{ chatReportId: string }>();
	// const { chatReportId } = useParams<{ chatReportId: string }>();
	// console.log("fileId", chatReportId);

	// useEffect(() => {
	// 	if (chatReportId) {
	// 		console.log("fileId", chatReportId);

	// 	}
	// }, [chatReportId]);

	// const file = useQuery(
	// 	api.reports.getFileById,
	// 	fileId && {
	// 		fileId: String(fileId),
	// 	},
	// );

	useEffect(() => {
		if (fetchedSummary) {
			const foundSummary = fetchedSummary.find(
				(summary) => summary._id === _id,
			);
			setChatSummary(foundSummary || null);
		}
	}, [fetchedSummary, _id]);

	const handlePrint = useReactToPrint({
		contentRef: templateRef,
		documentTitle: chatSummary?.title || "Security Report",
		onBeforePrint: () => {
			// setIsPrinting(true);
			return Promise.resolve();
		},
		onAfterPrint: () => {
			// setIsPrinting(false);
		},
	});

	return (
		<div className="relative p-8">
			<div className="flex justify-between items-center absolute top-4 left-4 right-4">
				<Button variant="outline" onClick={() => navigate(-1)}>
					<ArrowLeft className="mr-2 h-4 w-4" />
					Back to Files
				</Button>
				{/* Print Button */}
				<Button onClick={handlePrint} variant="outline">
					Print Chat Summary
				</Button>
			</div>

			<Card className="max-w-[850px] mx-auto bg-white">
				<CardContent ref={templateRef} className="p-8">
					{/* Header */}
					<div className="flex justify-between items-center border-b border-gray-200 pb-4">
						<div className="flex items-center gap-3">
							<img src={Logo} alt="Logo" className="h-8 w-auto" />
							<span className="text-sm font-medium text-gray-600">
								denkMinds
							</span>
						</div>
						<div className="text-sm text-gray-500">
							https://denkminds.vercel.app
						</div>
					</div>

					{/* Title Section */}
					<div className="my-8">
						<h1 className="text-2xl font-semibold text-gray-900 mb-6">
							{chatSummary?.title || "Security Report"}
						</h1>
						<div className="text-sm text-gray-600 space-y-1">
							<p>Generated by: {user.username}</p>
							<p>Date: {new Date().toLocaleDateString()}</p>
						</div>
					</div>

					{/* Chat Summary Section */}
					<div className="mt-8 print-content">
						<h2 className="text-lg font-semibold mb-4">
							Conversation:
						</h2>
						{chatSummary ? (
							<>
								<h2 className="text-lg font-semibold mb-4">
									Title: {chatSummary.title}
								</h2>
								{/* Split content by newlines and map over it */}
								{chatSummary.content
									.split("\n")
									.map((paragraph, index) => (
										<p
											key={`${paragraph.slice(0, 10)}-${index}`}
											className="text-sm mb-4"
										>
											{paragraph.trim()}{" "}
											{/* Trim to avoid any extra whitespace */}
										</p>
									))}
								<p className="text-xs text-gray-500">
									Created At:{" "}
									{new Date(
										chatSummary.createdAt,
									).toLocaleString()}
								</p>
							</>
						) : (
							<p>Loading chat summary...</p>
						)}
					</div>

					{/* Footer */}
					<div className="print-footer">
						<p>Â© 2025 denkMinds. All rights reserved.</p>
					</div>
				</CardContent>
			</Card>
		</div>
	);
}
