{
	"message": "Scan completed successfully",
	"projectKey": "Juice-Shop",
	"sonarUrl": "http://localhost:9000/dashboard?id=Juice-Shop",
	"report": {
		"metrics": {
			"coverage": "0.0",
			"bugs": "3",
			"reliability_rating": "3.0",
			"code_smells": "61",
			"duplicated_lines_density": "7.7",
			"security_rating": "5.0",
			"ncloc": "2431",
			"vulnerabilities": "5",
			"security_hotspots_reviewed": "0.0",
			"software_quality_maintainability_rating": "1.0"
		},
		"issues": [
			{
				"key": "401450b7-23a1-42a2-8380-b3c3c3b3b11e",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal 'vulnerabilities/under-construction.html' 8 times.",
				"component": "Juice-Shop:app.py",
				"line": 199,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "d8f69ad3-437f-4fea-a2a1-c3a5e724e4b8",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal \"Invalid Credentials\" 3 times.",
				"component": "Juice-Shop:app.py",
				"line": 213,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "6791b0d4-d725-454f-8e9b-7c5d393ef53d",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Refactor this function to reduce its Cognitive Complexity from 24 to the 15 allowed.",
				"component": "Juice-Shop:app.py",
				"line": 806,
				"tags": ["brain-overload"],
				"rule": {
					"key": "python:S3776",
					"name": "Cognitive Complexity of functions should not be too high",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Reducing cognitive complexity can be challenging.<br> Here are a few suggestions:</p>\n<ul>\n  <li> <strong>Extract complex conditions in a new function.</strong><br> Mixed operators in condition will increase complexity. Extracting the\n  condition in a new function with an appropriate name will reduce cognitive load. </li>\n  <li> <strong>Break down large functions.</strong><br> Large functions can be hard to understand and maintain. If a function is doing too many\n  things, consider breaking it down into smaller, more manageable functions. Each function should have a single responsibility. </li>\n  <li> <strong>Avoid deep nesting by returning early.</strong><br> To avoid the nesting of conditions, process exceptional cases first and return\n  early. </li>\n</ul>\n\n<p><strong>Extraction of a complex condition in a new function.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The code is using a complex condition and has a cognitive cost of 5.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()\n</pre>\n<h4>Compliant solution</h4>\n<p>Even if the cognitive complexity of the whole program did not change, it is easier for a reader to understand the code of the\n<code>process_eligible_users</code> function, which now only has a cognitive cost of 3.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)\n</pre>\n<p><strong>Break down large functions.</strong></p>\n<h4>Noncompliant code example</h4>\n<p><em>Note:</em> The code is simplified here, to illustrate the purpose. Please imagine there is more happening in the process.<br></p>\n<p>The bellow code has a cognitive complexity score of 8.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process active user with profile\n        else:                        # +1 (else)\n            ... # process active user without profile\n    else:                            # +1 (else)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process inactive user with profile\n        else:                        # +1 (else)\n            ... # process inactive user without profile\n</pre>\n<p>This function could be refactored into smaller functions: The complexity is spread over multiple functions and the breaks in flow are no more\nnested.<br> The <code>process_user</code> has now a complexity score of two.</p>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        process_active_user(user)\n    else:                            # +1 (else)\n        process_inactive_user(user)\n\ndef process_active_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process active user with profile\n    else:                            # +1 (else)\n        ... # process active user without profile\n\ndef process_inactive_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process inactive user with profile\n    else:                            # +1 (else)\n        ... # process inactive user without profile\n</pre>\n<p><strong>Avoid deep nesting by returning early.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The below code has a cognitive complexity of 6.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\ndef calculate(data):\n    if data is not None:  # +1 (if)\n        total = 0\n        for item in data: # +1 (for) +1 (nested)\n            if item &gt; 0:  # +1 (if)  +2 (nested)\n                total += item * 2\n        return total\n</pre>\n<h4>Compliant solution</h4>\n<p>Checking for the edge case first flattens the <code>if</code> statements and reduces the cognitive complexity to 4.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\ndef calculate(data):\n    if data is None:      # +1 (if)\n        return None\n    total = 0\n    for item in data:     # +1 (for)\n        if item &gt; 0:      # +1 (if) +1 (nested)\n            total += item * 2\n    return total\n</pre>\n<h3>Pitfalls</h3>\n<p>As this code is complex, ensure that you have unit tests that cover the code before refactoring.</p>",
							"problemCodeSnippet": "def process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()",
							"remediationCodeSnippet": "def process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)"
						}
					]
				}
			},
			{
				"key": "9112a97e-dd7f-4475-8a8a-8d93a51cde90",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Refactor this function to reduce its Cognitive Complexity from 17 to the 15 allowed.",
				"component": "Juice-Shop:app.py",
				"line": 856,
				"tags": ["brain-overload"],
				"rule": {
					"key": "python:S3776",
					"name": "Cognitive Complexity of functions should not be too high",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Reducing cognitive complexity can be challenging.<br> Here are a few suggestions:</p>\n<ul>\n  <li> <strong>Extract complex conditions in a new function.</strong><br> Mixed operators in condition will increase complexity. Extracting the\n  condition in a new function with an appropriate name will reduce cognitive load. </li>\n  <li> <strong>Break down large functions.</strong><br> Large functions can be hard to understand and maintain. If a function is doing too many\n  things, consider breaking it down into smaller, more manageable functions. Each function should have a single responsibility. </li>\n  <li> <strong>Avoid deep nesting by returning early.</strong><br> To avoid the nesting of conditions, process exceptional cases first and return\n  early. </li>\n</ul>\n\n<p><strong>Extraction of a complex condition in a new function.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The code is using a complex condition and has a cognitive cost of 5.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()\n</pre>\n<h4>Compliant solution</h4>\n<p>Even if the cognitive complexity of the whole program did not change, it is easier for a reader to understand the code of the\n<code>process_eligible_users</code> function, which now only has a cognitive cost of 3.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)\n</pre>\n<p><strong>Break down large functions.</strong></p>\n<h4>Noncompliant code example</h4>\n<p><em>Note:</em> The code is simplified here, to illustrate the purpose. Please imagine there is more happening in the process.<br></p>\n<p>The bellow code has a cognitive complexity score of 8.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process active user with profile\n        else:                        # +1 (else)\n            ... # process active user without profile\n    else:                            # +1 (else)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process inactive user with profile\n        else:                        # +1 (else)\n            ... # process inactive user without profile\n</pre>\n<p>This function could be refactored into smaller functions: The complexity is spread over multiple functions and the breaks in flow are no more\nnested.<br> The <code>process_user</code> has now a complexity score of two.</p>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        process_active_user(user)\n    else:                            # +1 (else)\n        process_inactive_user(user)\n\ndef process_active_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process active user with profile\n    else:                            # +1 (else)\n        ... # process active user without profile\n\ndef process_inactive_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process inactive user with profile\n    else:                            # +1 (else)\n        ... # process inactive user without profile\n</pre>\n<p><strong>Avoid deep nesting by returning early.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The below code has a cognitive complexity of 6.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\ndef calculate(data):\n    if data is not None:  # +1 (if)\n        total = 0\n        for item in data: # +1 (for) +1 (nested)\n            if item &gt; 0:  # +1 (if)  +2 (nested)\n                total += item * 2\n        return total\n</pre>\n<h4>Compliant solution</h4>\n<p>Checking for the edge case first flattens the <code>if</code> statements and reduces the cognitive complexity to 4.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\ndef calculate(data):\n    if data is None:      # +1 (if)\n        return None\n    total = 0\n    for item in data:     # +1 (for)\n        if item &gt; 0:      # +1 (if) +1 (nested)\n            total += item * 2\n    return total\n</pre>\n<h3>Pitfalls</h3>\n<p>As this code is complex, ensure that you have unit tests that cover the code before refactoring.</p>",
							"problemCodeSnippet": "def process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()",
							"remediationCodeSnippet": "def process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)"
						}
					]
				}
			},
			{
				"key": "11b9fec7-a967-43fa-8c98-d9621340f1b5",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal \"vulnerabilities/insecure-deserialization.html\" 3 times.",
				"component": "Juice-Shop:app.py",
				"line": 878,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "3525636c-254b-418f-823b-c123432a1303",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Don't use `datetime.datetime.utcnow` to create this datetime object.",
				"component": "Juice-Shop:helper/auth.py",
				"line": 12,
				"tags": ["datetime", "pitfall"],
				"rule": {
					"key": "python:S6903",
					"name": "Using timezone-aware \"datetime\" objects should be preferred over using \"datetime.datetime.utcnow\" and \"datetime.datetime.utcfromtimestamp\"",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>To fix this issue, prefer the usage of a timezone-aware datetime.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom datetime import datetime\n\ndatetime.utcnow() # Noncompliant\n\ntimestamp = 1571595618.0\ndatetime.utcfromtimestamp(timestamp) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom datetime import datetime, timezone\n\ndatetime.now(timezone.utc) # Compliant\n\ntimestamp = 1571595618.0\ndatetime.fromtimestamp(timestamp, timezone.utc) # Compliant\n</pre>",
							"problemCodeSnippet": "from datetime import datetime\n\ndatetime.utcnow() # Noncompliant\n\ntimestamp = 1571595618.0\ndatetime.utcfromtimestamp(timestamp) # Noncompliant",
							"remediationCodeSnippet": "from datetime import datetime, timezone\n\ndatetime.now(timezone.utc) # Compliant\n\ntimestamp = 1571595618.0\ndatetime.fromtimestamp(timestamp, timezone.utc) # Compliant"
						}
					]
				}
			},
			{
				"key": "8d39d95a-a436-40f4-8162-b69892292852",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Don't use `datetime.datetime.utcnow` to create this datetime object.",
				"component": "Juice-Shop:helper/auth.py",
				"line": 29,
				"tags": ["datetime", "pitfall"],
				"rule": {
					"key": "python:S6903",
					"name": "Using timezone-aware \"datetime\" objects should be preferred over using \"datetime.datetime.utcnow\" and \"datetime.datetime.utcfromtimestamp\"",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>To fix this issue, prefer the usage of a timezone-aware datetime.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom datetime import datetime\n\ndatetime.utcnow() # Noncompliant\n\ntimestamp = 1571595618.0\ndatetime.utcfromtimestamp(timestamp) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom datetime import datetime, timezone\n\ndatetime.now(timezone.utc) # Compliant\n\ntimestamp = 1571595618.0\ndatetime.fromtimestamp(timestamp, timezone.utc) # Compliant\n</pre>",
							"problemCodeSnippet": "from datetime import datetime\n\ndatetime.utcnow() # Noncompliant\n\ntimestamp = 1571595618.0\ndatetime.utcfromtimestamp(timestamp) # Noncompliant",
							"remediationCodeSnippet": "from datetime import datetime, timezone\n\ndatetime.now(timezone.utc) # Compliant\n\ntimestamp = 1571595618.0\ndatetime.fromtimestamp(timestamp, timezone.utc) # Compliant"
						}
					]
				}
			},
			{
				"key": "7e03d5cc-a0e1-4218-bd83-d35665c849ff",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Don't use `datetime.datetime.utcnow` to create this datetime object.",
				"component": "Juice-Shop:helper/auth.py",
				"line": 30,
				"tags": ["datetime", "pitfall"],
				"rule": {
					"key": "python:S6903",
					"name": "Using timezone-aware \"datetime\" objects should be preferred over using \"datetime.datetime.utcnow\" and \"datetime.datetime.utcfromtimestamp\"",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>To fix this issue, prefer the usage of a timezone-aware datetime.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom datetime import datetime\n\ndatetime.utcnow() # Noncompliant\n\ntimestamp = 1571595618.0\ndatetime.utcfromtimestamp(timestamp) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom datetime import datetime, timezone\n\ndatetime.now(timezone.utc) # Compliant\n\ntimestamp = 1571595618.0\ndatetime.fromtimestamp(timestamp, timezone.utc) # Compliant\n</pre>",
							"problemCodeSnippet": "from datetime import datetime\n\ndatetime.utcnow() # Noncompliant\n\ntimestamp = 1571595618.0\ndatetime.utcfromtimestamp(timestamp) # Noncompliant",
							"remediationCodeSnippet": "from datetime import datetime, timezone\n\ndatetime.now(timezone.utc) # Compliant\n\ntimestamp = 1571595618.0\ndatetime.fromtimestamp(timestamp, timezone.utc) # Compliant"
						}
					]
				}
			},
			{
				"key": "ec8b1ce7-67e7-44e5-9d89-b4587975935c",
				"type": "VULNERABILITY",
				"severity": "CRITICAL",
				"message": "Don't use a JWT token without verifying its signature.",
				"component": "Juice-Shop:helper/auth.py",
				"line": 39,
				"tags": ["cwe", "privacy"],
				"rule": {
					"key": "python:S5659",
					"name": "JWT should be signed and verified",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "30min"
					},
					"remediationSteps": [
						{
							"context": "PyJWT",
							"description": "<p>The following code contains an example of JWT decoding without verification of the signature.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport jwt\n\njwt.decode(token, options={\"verify_signature\":False}) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>By default, verification is enabled for the method <code>decode</code>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport jwt\n\njwt.decode(token, key, algorithms=\"HS256\")\n</pre>\n<h3>How does this work?</h3>\n<h4>Verify the signature of your tokens</h4>\n<p>Resolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.</p>\n<p>Every time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.</p>\n<p>To resolve the issue, follow these instructions:</p>\n<ol>\n  <li> Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. </li>\n  <li> Handle invalid signatures appropriately: If a JWT’s signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. </li>\n  <li> Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. </li>\n</ol>\n<p>By following these practices, you can ensure the security of your application’s JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.</p>\n<h3>Going the extra mile</h3>\n<h4>Securely store your secret keys</h4>\n<p>Ensure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.</p>\n<h4>Rotate your secret keys</h4>\n<p>Even with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.</p>",
							"problemCodeSnippet": "import jwt\n\njwt.decode(token, options={\"verify_signature\":False}) # Noncompliant",
							"remediationCodeSnippet": "import jwt\n\njwt.decode(token, key, algorithms=\"HS256\")"
						},
						{
							"context": "python-jwt",
							"description": "<p>The following code contains an example of JWT decoding without verification of the signature.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport python_jwt as jwt\n\njwt.process_jwt(token) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport python_jwt as jwt\n\njwt.process_jwt(token)\njwt.verify_jwt(token, key, ['HS256'])\n</pre>\n<h3>How does this work?</h3>\n<h4>Verify the signature of your tokens</h4>\n<p>Resolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.</p>\n<p>Every time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.</p>\n<p>To resolve the issue, follow these instructions:</p>\n<ol>\n  <li> Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. </li>\n  <li> Handle invalid signatures appropriately: If a JWT’s signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. </li>\n  <li> Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. </li>\n</ol>\n<p>By following these practices, you can ensure the security of your application’s JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.</p>\n<h3>Going the extra mile</h3>\n<h4>Securely store your secret keys</h4>\n<p>Ensure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.</p>\n<h4>Rotate your secret keys</h4>\n<p>Even with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.</p>",
							"problemCodeSnippet": "import python_jwt as jwt\n\njwt.process_jwt(token) # Noncompliant",
							"remediationCodeSnippet": "import python_jwt as jwt\n\njwt.process_jwt(token)\njwt.verify_jwt(token, key, ['HS256'])"
						},
						{
							"context": "python-jose",
							"description": "<p>The following code contains an example of JWT decoding without verification of the signature.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"111\" data-diff-type=\"noncompliant\">\nfrom jose import jwt\n\njwt.decode(token, None, options={\"verify_signature\": False}) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>By default, verification is enabled for the methods <code>decode</code> and <code>verify</code>.</p>\n<pre data-diff-id=\"111\" data-diff-type=\"compliant\">\nfrom jose import jwt\n\njwt.decode(token, key, algorithms=[\"HS256\"])\n</pre>\n<h3>How does this work?</h3>\n<h4>Verify the signature of your tokens</h4>\n<p>Resolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.</p>\n<p>Every time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.</p>\n<p>To resolve the issue, follow these instructions:</p>\n<ol>\n  <li> Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. </li>\n  <li> Handle invalid signatures appropriately: If a JWT’s signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. </li>\n  <li> Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. </li>\n</ol>\n<p>By following these practices, you can ensure the security of your application’s JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.</p>\n<h3>Going the extra mile</h3>\n<h4>Securely store your secret keys</h4>\n<p>Ensure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.</p>\n<h4>Rotate your secret keys</h4>\n<p>Even with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.</p>",
							"problemCodeSnippet": "from jose import jwt\n\njwt.decode(token, None, options={\"verify_signature\": False}) # Noncompliant",
							"remediationCodeSnippet": "from jose import jwt\n\njwt.decode(token, key, algorithms=[\"HS256\"])"
						}
					]
				}
			},
			{
				"key": "499de832-4d8e-40f9-9d7a-b8fe5666d00f",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Don't use `datetime.datetime.utcnow` to create this datetime object.",
				"component": "Juice-Shop:helper/auth.py",
				"line": 48,
				"tags": ["datetime", "pitfall"],
				"rule": {
					"key": "python:S6903",
					"name": "Using timezone-aware \"datetime\" objects should be preferred over using \"datetime.datetime.utcnow\" and \"datetime.datetime.utcfromtimestamp\"",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>To fix this issue, prefer the usage of a timezone-aware datetime.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom datetime import datetime\n\ndatetime.utcnow() # Noncompliant\n\ntimestamp = 1571595618.0\ndatetime.utcfromtimestamp(timestamp) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom datetime import datetime, timezone\n\ndatetime.now(timezone.utc) # Compliant\n\ntimestamp = 1571595618.0\ndatetime.fromtimestamp(timestamp, timezone.utc) # Compliant\n</pre>",
							"problemCodeSnippet": "from datetime import datetime\n\ndatetime.utcnow() # Noncompliant\n\ntimestamp = 1571595618.0\ndatetime.utcfromtimestamp(timestamp) # Noncompliant",
							"remediationCodeSnippet": "from datetime import datetime, timezone\n\ndatetime.now(timezone.utc) # Compliant\n\ntimestamp = 1571595618.0\ndatetime.fromtimestamp(timestamp, timezone.utc) # Compliant"
						}
					]
				}
			},
			{
				"key": "b4ad763a-3a8b-47a9-bae5-43838b640141",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Don't use `datetime.datetime.utcnow` to create this datetime object.",
				"component": "Juice-Shop:helper/auth.py",
				"line": 49,
				"tags": ["datetime", "pitfall"],
				"rule": {
					"key": "python:S6903",
					"name": "Using timezone-aware \"datetime\" objects should be preferred over using \"datetime.datetime.utcnow\" and \"datetime.datetime.utcfromtimestamp\"",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>To fix this issue, prefer the usage of a timezone-aware datetime.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom datetime import datetime\n\ndatetime.utcnow() # Noncompliant\n\ntimestamp = 1571595618.0\ndatetime.utcfromtimestamp(timestamp) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom datetime import datetime, timezone\n\ndatetime.now(timezone.utc) # Compliant\n\ntimestamp = 1571595618.0\ndatetime.fromtimestamp(timestamp, timezone.utc) # Compliant\n</pre>",
							"problemCodeSnippet": "from datetime import datetime\n\ndatetime.utcnow() # Noncompliant\n\ntimestamp = 1571595618.0\ndatetime.utcfromtimestamp(timestamp) # Noncompliant",
							"remediationCodeSnippet": "from datetime import datetime, timezone\n\ndatetime.now(timezone.utc) # Compliant\n\ntimestamp = 1571595618.0\ndatetime.fromtimestamp(timestamp, timezone.utc) # Compliant"
						}
					]
				}
			},
			{
				"key": "dbf00925-d694-4a13-aea6-b116c01ea985",
				"type": "CODE_SMELL",
				"severity": "MINOR",
				"message": "Remove the unused local variable \"e\".",
				"component": "Juice-Shop:vulnerabilities/SQLi.py",
				"line": 157,
				"tags": ["unused"],
				"rule": {
					"key": "python:S1481",
					"name": "Unused local variables should be removed",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>The fix for this issue is straightforward. Once you ensure the unused variable is not part of an incomplete implementation leading to bugs, you\njust need to remove it.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef hello(name):\n    message = \"Hello \" + name # Noncompliant - message is unused\n    print(name)\nfor i in range(10): # Noncompliant - i is unused\n    foo()\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef hello(name):\n    message = \"Hello \" + name\n    print(message)\nfor _ in range(10):\n    foo()\n</pre>",
							"problemCodeSnippet": "def hello(name):\n    message = \"Hello \" + name # Noncompliant - message is unused\n    print(name)\nfor i in range(10): # Noncompliant - i is unused\n    foo()",
							"remediationCodeSnippet": "def hello(name):\n    message = \"Hello \" + name\n    print(message)\nfor _ in range(10):\n    foo()"
						}
					]
				}
			},
			{
				"key": "53b861aa-825a-4d80-a74d-a5155e99e002",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal 'vulnerabilities/no-sql-injection.html' 3 times.",
				"component": "Juice-Shop:app.py",
				"line": 200,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "0aaa2537-064c-4b3d-8e22-a7aa4825bb8d",
				"type": "BUG",
				"severity": "MAJOR",
				"message": "Remove or correct this useless self-assignment.",
				"component": "Juice-Shop:helper/mongodb_manager.py",
				"line": 20,
				"tags": ["convention", "confusing"],
				"rule": {
					"key": "python:S1656",
					"name": "Variables should not be self-assigned",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "3min"
					},
					"remediationSteps": []
				}
			},
			{
				"key": "740935c6-889d-4109-88fa-34900a09fe31",
				"type": "BUG",
				"severity": "MAJOR",
				"message": "Remove or correct this useless self-assignment.",
				"component": "Juice-Shop:helper/mongodb_manager.py",
				"line": 40,
				"tags": ["convention", "confusing"],
				"rule": {
					"key": "python:S1656",
					"name": "Variables should not be self-assigned",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "3min"
					},
					"remediationSteps": []
				}
			},
			{
				"key": "9b33b722-daf0-4a42-8d55-83cb2c1527cd",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal 'https://0.0.0.0:5001/api/stock/product?product=' 3 times.",
				"component": "Juice-Shop:app.py",
				"line": 723,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "b41b6697-6ad2-4aa1-8a13-66d5d293c5de",
				"type": "VULNERABILITY",
				"severity": "CRITICAL",
				"message": "Enable server certificate validation on this SSL/TLS connection.",
				"component": "Juice-Shop:app.py",
				"line": 731,
				"tags": ["cwe", "privacy", "ssl"],
				"rule": {
					"key": "python:S4830",
					"name": "Server certificates should be verified during SSL/TLS connections",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "aiohttp",
							"description": "<p>The following code contains examples of disabled certificate validation.</p>\n<p>The certificate validation gets disabled by setting <code>verify_ssl</code> to <code>False</code>. To enable validation set the value to\n<code>True</code> or do not set <code>verify_ssl</code> at all to use the secure default value.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"noncompliant\">\nimport aiohttp\n\nasync def example():\n  async with aiohttp.ClientSession() as session:\n    session.get(\"https://example.com\", verify_ssl=False) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"compliant\">\nimport aiohttp\n\n# By default, certificate validation is enabled\n\nasync def example():\n  async with aiohttp.ClientSession() as session:\n    session.get(\"https://example.com\")\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>",
							"problemCodeSnippet": "import aiohttp\n\nasync def example():\n  async with aiohttp.ClientSession() as session:\n    session.get(\"https://example.com\", verify_ssl=False) # Noncompliant",
							"remediationCodeSnippet": "import aiohttp\n\n# By default, certificate validation is enabled\n\nasync def example():\n  async with aiohttp.ClientSession() as session:\n    session.get(\"https://example.com\")"
						},
						{
							"context": "Python Standard Library",
							"description": "<p>The following code contains examples of disabled certificate validation.</p>\n<p>Certificate validation is not enabled by default when <code>_create_unverified_context</code> is used. It is recommended to use\n<code>_create_default_https_context</code> instead to create a secure context that validates certificates.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nimport ssl\n\nctx1 = ssl._create_unverified_context() # Noncompliant\nctx2 = ssl._create_stdlib_context() # Noncompliant\n\nctx3 = ssl.create_default_context()\nctx3.verify_mode = ssl.CERT_NONE # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nimport ssl\n\nctx = ssl.create_default_context()\nctx.verify_mode = ssl.CERT_REQUIRED\n\n# By default, certificate validation is enabled\nctx = ssl._create_default_https_context()\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>",
							"problemCodeSnippet": "import ssl\n\nctx1 = ssl._create_unverified_context() # Noncompliant\nctx2 = ssl._create_stdlib_context() # Noncompliant\n\nctx3 = ssl.create_default_context()\nctx3.verify_mode = ssl.CERT_NONE # Noncompliant",
							"remediationCodeSnippet": "import ssl\n\nctx = ssl.create_default_context()\nctx.verify_mode = ssl.CERT_REQUIRED\n\n# By default, certificate validation is enabled\nctx = ssl._create_default_https_context()"
						},
						{
							"context": "Requests",
							"description": "<p>The following code contains examples of disabled certificate validation.</p>\n<p>The certificate validation gets disabled by setting <code>verify</code> to <code>False</code>. To enable validation set the value to\n<code>True</code> or do not set <code>verify</code> at all to use the secure default value.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport requests\n\nrequests.request('GET', 'https://example.com', verify=False) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport requests\n\n# By default, certificate validation is enabled\nrequests.request('GET', 'https://example.com')\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>",
							"problemCodeSnippet": "import requests\n\nrequests.request('GET', 'https://example.com', verify=False) # Noncompliant",
							"remediationCodeSnippet": "import requests\n\n# By default, certificate validation is enabled\nrequests.request('GET', 'https://example.com')"
						},
						{
							"context": "HTTPX",
							"description": "<p>The following code contains examples of disabled certificate validation.</p>\n<p>The certificate validation gets disabled by setting <code>verify</code> to <code>False</code>. To enable validation set the value to\n<code>True</code> or do not set <code>verify</code> at all to use the secure default value.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"noncompliant\">\nimport httpx\n\nhttpx.get('https://example.com', verify=False)  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"compliant\">\nimport httpx\n\n# By default, certificate validation is enabled\nhttpx.get('https://example.com')\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>",
							"problemCodeSnippet": "import httpx\n\nhttpx.get('https://example.com', verify=False)  # Noncompliant",
							"remediationCodeSnippet": "import httpx\n\n# By default, certificate validation is enabled\nhttpx.get('https://example.com')"
						},
						{
							"context": "OpenSSL",
							"description": "<p>The following code contains examples of disabled certificate validation.</p>\n<p>Certificate validation is not enabled by default and has to be explicitly enabled through <code>set_verify</code>.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom OpenSSL import SSL\n\nctx1 = SSL.Context(SSL.TLSv1_2_METHOD) # Noncompliant\n\nctx2 = SSL.Context(SSL.TLSv1_2_METHOD)\nctx2.set_verify(SSL.VERIFY_NONE, verify_callback) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom OpenSSL import SSL\n\nctx = SSL.Context(SSL.TLSv1_2_METHOD)\nctx.set_verify(SSL.VERIFY_PEER, verify_callback)\nctx.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT, verify_callback)\nctx.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT | SSL.VERIFY_CLIENT_ONCE, verify_callback)\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>",
							"problemCodeSnippet": "from OpenSSL import SSL\n\nctx1 = SSL.Context(SSL.TLSv1_2_METHOD) # Noncompliant\n\nctx2 = SSL.Context(SSL.TLSv1_2_METHOD)\nctx2.set_verify(SSL.VERIFY_NONE, verify_callback) # Noncompliant",
							"remediationCodeSnippet": "from OpenSSL import SSL\n\nctx = SSL.Context(SSL.TLSv1_2_METHOD)\nctx.set_verify(SSL.VERIFY_PEER, verify_callback)\nctx.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT, verify_callback)\nctx.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT | SSL.VERIFY_CLIENT_ONCE, verify_callback)"
						}
					]
				}
			},
			{
				"key": "535b292e-d5b3-41ef-abb2-a4a2d78f2fa3",
				"type": "VULNERABILITY",
				"severity": "CRITICAL",
				"message": "Enable server certificate validation on this SSL/TLS connection.",
				"component": "Juice-Shop:app.py",
				"line": 723,
				"tags": ["cwe", "privacy", "ssl"],
				"rule": {
					"key": "python:S4830",
					"name": "Server certificates should be verified during SSL/TLS connections",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "aiohttp",
							"description": "<p>The following code contains examples of disabled certificate validation.</p>\n<p>The certificate validation gets disabled by setting <code>verify_ssl</code> to <code>False</code>. To enable validation set the value to\n<code>True</code> or do not set <code>verify_ssl</code> at all to use the secure default value.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"noncompliant\">\nimport aiohttp\n\nasync def example():\n  async with aiohttp.ClientSession() as session:\n    session.get(\"https://example.com\", verify_ssl=False) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"compliant\">\nimport aiohttp\n\n# By default, certificate validation is enabled\n\nasync def example():\n  async with aiohttp.ClientSession() as session:\n    session.get(\"https://example.com\")\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>",
							"problemCodeSnippet": "import aiohttp\n\nasync def example():\n  async with aiohttp.ClientSession() as session:\n    session.get(\"https://example.com\", verify_ssl=False) # Noncompliant",
							"remediationCodeSnippet": "import aiohttp\n\n# By default, certificate validation is enabled\n\nasync def example():\n  async with aiohttp.ClientSession() as session:\n    session.get(\"https://example.com\")"
						},
						{
							"context": "Python Standard Library",
							"description": "<p>The following code contains examples of disabled certificate validation.</p>\n<p>Certificate validation is not enabled by default when <code>_create_unverified_context</code> is used. It is recommended to use\n<code>_create_default_https_context</code> instead to create a secure context that validates certificates.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nimport ssl\n\nctx1 = ssl._create_unverified_context() # Noncompliant\nctx2 = ssl._create_stdlib_context() # Noncompliant\n\nctx3 = ssl.create_default_context()\nctx3.verify_mode = ssl.CERT_NONE # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nimport ssl\n\nctx = ssl.create_default_context()\nctx.verify_mode = ssl.CERT_REQUIRED\n\n# By default, certificate validation is enabled\nctx = ssl._create_default_https_context()\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>",
							"problemCodeSnippet": "import ssl\n\nctx1 = ssl._create_unverified_context() # Noncompliant\nctx2 = ssl._create_stdlib_context() # Noncompliant\n\nctx3 = ssl.create_default_context()\nctx3.verify_mode = ssl.CERT_NONE # Noncompliant",
							"remediationCodeSnippet": "import ssl\n\nctx = ssl.create_default_context()\nctx.verify_mode = ssl.CERT_REQUIRED\n\n# By default, certificate validation is enabled\nctx = ssl._create_default_https_context()"
						},
						{
							"context": "Requests",
							"description": "<p>The following code contains examples of disabled certificate validation.</p>\n<p>The certificate validation gets disabled by setting <code>verify</code> to <code>False</code>. To enable validation set the value to\n<code>True</code> or do not set <code>verify</code> at all to use the secure default value.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport requests\n\nrequests.request('GET', 'https://example.com', verify=False) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport requests\n\n# By default, certificate validation is enabled\nrequests.request('GET', 'https://example.com')\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>",
							"problemCodeSnippet": "import requests\n\nrequests.request('GET', 'https://example.com', verify=False) # Noncompliant",
							"remediationCodeSnippet": "import requests\n\n# By default, certificate validation is enabled\nrequests.request('GET', 'https://example.com')"
						},
						{
							"context": "HTTPX",
							"description": "<p>The following code contains examples of disabled certificate validation.</p>\n<p>The certificate validation gets disabled by setting <code>verify</code> to <code>False</code>. To enable validation set the value to\n<code>True</code> or do not set <code>verify</code> at all to use the secure default value.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"noncompliant\">\nimport httpx\n\nhttpx.get('https://example.com', verify=False)  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"compliant\">\nimport httpx\n\n# By default, certificate validation is enabled\nhttpx.get('https://example.com')\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>",
							"problemCodeSnippet": "import httpx\n\nhttpx.get('https://example.com', verify=False)  # Noncompliant",
							"remediationCodeSnippet": "import httpx\n\n# By default, certificate validation is enabled\nhttpx.get('https://example.com')"
						},
						{
							"context": "OpenSSL",
							"description": "<p>The following code contains examples of disabled certificate validation.</p>\n<p>Certificate validation is not enabled by default and has to be explicitly enabled through <code>set_verify</code>.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom OpenSSL import SSL\n\nctx1 = SSL.Context(SSL.TLSv1_2_METHOD) # Noncompliant\n\nctx2 = SSL.Context(SSL.TLSv1_2_METHOD)\nctx2.set_verify(SSL.VERIFY_NONE, verify_callback) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom OpenSSL import SSL\n\nctx = SSL.Context(SSL.TLSv1_2_METHOD)\nctx.set_verify(SSL.VERIFY_PEER, verify_callback)\nctx.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT, verify_callback)\nctx.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT | SSL.VERIFY_CLIENT_ONCE, verify_callback)\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>",
							"problemCodeSnippet": "from OpenSSL import SSL\n\nctx1 = SSL.Context(SSL.TLSv1_2_METHOD) # Noncompliant\n\nctx2 = SSL.Context(SSL.TLSv1_2_METHOD)\nctx2.set_verify(SSL.VERIFY_NONE, verify_callback) # Noncompliant",
							"remediationCodeSnippet": "from OpenSSL import SSL\n\nctx = SSL.Context(SSL.TLSv1_2_METHOD)\nctx.set_verify(SSL.VERIFY_PEER, verify_callback)\nctx.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT, verify_callback)\nctx.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT | SSL.VERIFY_CLIENT_ONCE, verify_callback)"
						}
					]
				}
			},
			{
				"key": "7d8f5e41-352e-4089-8b6f-b9b3ef330fab",
				"type": "VULNERABILITY",
				"severity": "CRITICAL",
				"message": "Enable server certificate validation on this SSL/TLS connection.",
				"component": "Juice-Shop:app.py",
				"line": 728,
				"tags": ["cwe", "privacy", "ssl"],
				"rule": {
					"key": "python:S4830",
					"name": "Server certificates should be verified during SSL/TLS connections",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "aiohttp",
							"description": "<p>The following code contains examples of disabled certificate validation.</p>\n<p>The certificate validation gets disabled by setting <code>verify_ssl</code> to <code>False</code>. To enable validation set the value to\n<code>True</code> or do not set <code>verify_ssl</code> at all to use the secure default value.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"noncompliant\">\nimport aiohttp\n\nasync def example():\n  async with aiohttp.ClientSession() as session:\n    session.get(\"https://example.com\", verify_ssl=False) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"compliant\">\nimport aiohttp\n\n# By default, certificate validation is enabled\n\nasync def example():\n  async with aiohttp.ClientSession() as session:\n    session.get(\"https://example.com\")\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>",
							"problemCodeSnippet": "import aiohttp\n\nasync def example():\n  async with aiohttp.ClientSession() as session:\n    session.get(\"https://example.com\", verify_ssl=False) # Noncompliant",
							"remediationCodeSnippet": "import aiohttp\n\n# By default, certificate validation is enabled\n\nasync def example():\n  async with aiohttp.ClientSession() as session:\n    session.get(\"https://example.com\")"
						},
						{
							"context": "Python Standard Library",
							"description": "<p>The following code contains examples of disabled certificate validation.</p>\n<p>Certificate validation is not enabled by default when <code>_create_unverified_context</code> is used. It is recommended to use\n<code>_create_default_https_context</code> instead to create a secure context that validates certificates.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nimport ssl\n\nctx1 = ssl._create_unverified_context() # Noncompliant\nctx2 = ssl._create_stdlib_context() # Noncompliant\n\nctx3 = ssl.create_default_context()\nctx3.verify_mode = ssl.CERT_NONE # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nimport ssl\n\nctx = ssl.create_default_context()\nctx.verify_mode = ssl.CERT_REQUIRED\n\n# By default, certificate validation is enabled\nctx = ssl._create_default_https_context()\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>",
							"problemCodeSnippet": "import ssl\n\nctx1 = ssl._create_unverified_context() # Noncompliant\nctx2 = ssl._create_stdlib_context() # Noncompliant\n\nctx3 = ssl.create_default_context()\nctx3.verify_mode = ssl.CERT_NONE # Noncompliant",
							"remediationCodeSnippet": "import ssl\n\nctx = ssl.create_default_context()\nctx.verify_mode = ssl.CERT_REQUIRED\n\n# By default, certificate validation is enabled\nctx = ssl._create_default_https_context()"
						},
						{
							"context": "Requests",
							"description": "<p>The following code contains examples of disabled certificate validation.</p>\n<p>The certificate validation gets disabled by setting <code>verify</code> to <code>False</code>. To enable validation set the value to\n<code>True</code> or do not set <code>verify</code> at all to use the secure default value.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport requests\n\nrequests.request('GET', 'https://example.com', verify=False) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport requests\n\n# By default, certificate validation is enabled\nrequests.request('GET', 'https://example.com')\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>",
							"problemCodeSnippet": "import requests\n\nrequests.request('GET', 'https://example.com', verify=False) # Noncompliant",
							"remediationCodeSnippet": "import requests\n\n# By default, certificate validation is enabled\nrequests.request('GET', 'https://example.com')"
						},
						{
							"context": "OpenSSL",
							"description": "<p>The following code contains examples of disabled certificate validation.</p>\n<p>Certificate validation is not enabled by default and has to be explicitly enabled through <code>set_verify</code>.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom OpenSSL import SSL\n\nctx1 = SSL.Context(SSL.TLSv1_2_METHOD) # Noncompliant\n\nctx2 = SSL.Context(SSL.TLSv1_2_METHOD)\nctx2.set_verify(SSL.VERIFY_NONE, verify_callback) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom OpenSSL import SSL\n\nctx = SSL.Context(SSL.TLSv1_2_METHOD)\nctx.set_verify(SSL.VERIFY_PEER, verify_callback)\nctx.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT, verify_callback)\nctx.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT | SSL.VERIFY_CLIENT_ONCE, verify_callback)\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>",
							"problemCodeSnippet": "from OpenSSL import SSL\n\nctx1 = SSL.Context(SSL.TLSv1_2_METHOD) # Noncompliant\n\nctx2 = SSL.Context(SSL.TLSv1_2_METHOD)\nctx2.set_verify(SSL.VERIFY_NONE, verify_callback) # Noncompliant",
							"remediationCodeSnippet": "from OpenSSL import SSL\n\nctx = SSL.Context(SSL.TLSv1_2_METHOD)\nctx.set_verify(SSL.VERIFY_PEER, verify_callback)\nctx.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT, verify_callback)\nctx.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT | SSL.VERIFY_CLIENT_ONCE, verify_callback)"
						},
						{
							"context": "HTTPX",
							"description": "<p>The following code contains examples of disabled certificate validation.</p>\n<p>The certificate validation gets disabled by setting <code>verify</code> to <code>False</code>. To enable validation set the value to\n<code>True</code> or do not set <code>verify</code> at all to use the secure default value.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"noncompliant\">\nimport httpx\n\nhttpx.get('https://example.com', verify=False)  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"compliant\">\nimport httpx\n\n# By default, certificate validation is enabled\nhttpx.get('https://example.com')\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>",
							"problemCodeSnippet": "import httpx\n\nhttpx.get('https://example.com', verify=False)  # Noncompliant",
							"remediationCodeSnippet": "import httpx\n\n# By default, certificate validation is enabled\nhttpx.get('https://example.com')"
						}
					]
				}
			},
			{
				"key": "67d326ca-2a43-4d83-954f-bcb61b3fc0c6",
				"type": "CODE_SMELL",
				"severity": "MINOR",
				"message": "Remove this closing tag \"?>\".",
				"component": "Juice-Shop:uploads/test.php",
				"line": 1,
				"tags": ["bad-practice", "per"],
				"rule": {
					"key": "php:S1780",
					"name": "Closing tag \"?>\" should be omitted on files containing only PHP",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Omitting the closing PHP tag can help prevent the injection of unintended output. It also eliminates the need to worry about removing or handling\nthe closing tag when modifying or concatenating multiple PHP files, making code maintenance easier.</p>",
							"problemCodeSnippet": "No problem code snippet available",
							"remediationCodeSnippet": "No remediation code snippet available"
						}
					]
				}
			},
			{
				"key": "0355f42e-1535-4c64-bd40-a793696f1534",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Refactor this function to reduce its Cognitive Complexity from 17 to the 15 allowed.",
				"component": "Juice-Shop:app.py",
				"line": 279,
				"tags": ["brain-overload"],
				"rule": {
					"key": "python:S3776",
					"name": "Cognitive Complexity of functions should not be too high",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Reducing cognitive complexity can be challenging.<br> Here are a few suggestions:</p>\n<ul>\n  <li> <strong>Extract complex conditions in a new function.</strong><br> Mixed operators in condition will increase complexity. Extracting the\n  condition in a new function with an appropriate name will reduce cognitive load. </li>\n  <li> <strong>Break down large functions.</strong><br> Large functions can be hard to understand and maintain. If a function is doing too many\n  things, consider breaking it down into smaller, more manageable functions. Each function should have a single responsibility. </li>\n  <li> <strong>Avoid deep nesting by returning early.</strong><br> To avoid the nesting of conditions, process exceptional cases first and return\n  early. </li>\n</ul>\n\n<p><strong>Extraction of a complex condition in a new function.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The code is using a complex condition and has a cognitive cost of 5.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()\n</pre>\n<h4>Compliant solution</h4>\n<p>Even if the cognitive complexity of the whole program did not change, it is easier for a reader to understand the code of the\n<code>process_eligible_users</code> function, which now only has a cognitive cost of 3.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)\n</pre>\n<p><strong>Break down large functions.</strong></p>\n<h4>Noncompliant code example</h4>\n<p><em>Note:</em> The code is simplified here, to illustrate the purpose. Please imagine there is more happening in the process.<br></p>\n<p>The bellow code has a cognitive complexity score of 8.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process active user with profile\n        else:                        # +1 (else)\n            ... # process active user without profile\n    else:                            # +1 (else)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process inactive user with profile\n        else:                        # +1 (else)\n            ... # process inactive user without profile\n</pre>\n<p>This function could be refactored into smaller functions: The complexity is spread over multiple functions and the breaks in flow are no more\nnested.<br> The <code>process_user</code> has now a complexity score of two.</p>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        process_active_user(user)\n    else:                            # +1 (else)\n        process_inactive_user(user)\n\ndef process_active_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process active user with profile\n    else:                            # +1 (else)\n        ... # process active user without profile\n\ndef process_inactive_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process inactive user with profile\n    else:                            # +1 (else)\n        ... # process inactive user without profile\n</pre>\n<p><strong>Avoid deep nesting by returning early.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The below code has a cognitive complexity of 6.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\ndef calculate(data):\n    if data is not None:  # +1 (if)\n        total = 0\n        for item in data: # +1 (for) +1 (nested)\n            if item &gt; 0:  # +1 (if)  +2 (nested)\n                total += item * 2\n        return total\n</pre>\n<h4>Compliant solution</h4>\n<p>Checking for the edge case first flattens the <code>if</code> statements and reduces the cognitive complexity to 4.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\ndef calculate(data):\n    if data is None:      # +1 (if)\n        return None\n    total = 0\n    for item in data:     # +1 (for)\n        if item &gt; 0:      # +1 (if) +1 (nested)\n            total += item * 2\n    return total\n</pre>\n<h3>Pitfalls</h3>\n<p>As this code is complex, ensure that you have unit tests that cover the code before refactoring.</p>",
							"problemCodeSnippet": "def process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()",
							"remediationCodeSnippet": "def process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)"
						}
					]
				}
			},
			{
				"key": "87dcbd9c-4391-47af-9f85-e9661d7ff8d9",
				"type": "CODE_SMELL",
				"severity": "MAJOR",
				"message": "Use <dialog> instead of the dialog role to ensure accessibility across all devices.",
				"component": "Juice-Shop:templates/vulnerabilities/no-sql-injection.html",
				"line": 35,
				"tags": ["accessibility"],
				"rule": {
					"key": "Web:S6819",
					"name": "Prefer tag over ARIA role",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": []
				}
			},
			{
				"key": "1b9377d7-5223-40bf-91ae-ba972b94a0f0",
				"type": "CODE_SMELL",
				"severity": "MAJOR",
				"message": "Remove the unused function parameter \"password\".",
				"component": "Juice-Shop:vulnerabilities/NoSQL.py",
				"line": 9,
				"tags": ["unused"],
				"rule": {
					"key": "python:S1172",
					"name": "Unused function parameters should be removed",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Having unused function parameters in your code can lead to confusion and misunderstanding of a developer’s intention. They reduce code readability\nand introduce the potential for errors. To avoid these problems, developers should remove unused parameters from function declarations.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef do_something(a, b): # \"b\" is unused\n  return compute(a)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef do_something(a):\n  return compute(a)\n</pre>",
							"problemCodeSnippet": "def do_something(a, b): # \"b\" is unused\n  return compute(a)",
							"remediationCodeSnippet": "def do_something(a):\n  return compute(a)"
						}
					]
				}
			},
			{
				"key": "df2c06c8-e5e5-473e-9e39-c30eb6626584",
				"type": "CODE_SMELL",
				"severity": "MINOR",
				"message": "A form label must be associated with a control.",
				"component": "Juice-Shop:templates/settings.html",
				"line": 70,
				"tags": ["accessibility"],
				"rule": {
					"key": "Web:S6853",
					"name": "Label elements should have a text label and an associated control",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>If you have a pair of control and <code>&lt;label&gt;</code> elements, make sure that the <code>&lt;label&gt;</code> wraps the control element. If\nyou lack a control element, add one.</p>\n<p>It is strongly recommended to avoid using generated <code>id</code>s since they must be deterministic.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;\n</pre>",
							"problemCodeSnippet": "&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;",
							"remediationCodeSnippet": "&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;"
						}
					]
				}
			},
			{
				"key": "de9c1172-8628-4346-916d-88efcf6d7c9e",
				"type": "CODE_SMELL",
				"severity": "MINOR",
				"message": "A form label must be associated with a control.",
				"component": "Juice-Shop:templates/vulnerabilities/blind-sql-injection.html",
				"line": 31,
				"tags": ["accessibility"],
				"rule": {
					"key": "Web:S6853",
					"name": "Label elements should have a text label and an associated control",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>If you have a pair of control and <code>&lt;label&gt;</code> elements, make sure that the <code>&lt;label&gt;</code> wraps the control element. If\nyou lack a control element, add one.</p>\n<p>It is strongly recommended to avoid using generated <code>id</code>s since they must be deterministic.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;\n</pre>",
							"problemCodeSnippet": "&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;",
							"remediationCodeSnippet": "&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;"
						}
					]
				}
			},
			{
				"key": "ce9bd76c-4791-4287-aa66-862cb718b26d",
				"type": "CODE_SMELL",
				"severity": "MINOR",
				"message": "A form label must be associated with a control.",
				"component": "Juice-Shop:templates/vulnerabilities/csrf.html",
				"line": 23,
				"tags": ["accessibility"],
				"rule": {
					"key": "Web:S6853",
					"name": "Label elements should have a text label and an associated control",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>If you have a pair of control and <code>&lt;label&gt;</code> elements, make sure that the <code>&lt;label&gt;</code> wraps the control element. If\nyou lack a control element, add one.</p>\n<p>It is strongly recommended to avoid using generated <code>id</code>s since they must be deterministic.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;\n</pre>",
							"problemCodeSnippet": "&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;",
							"remediationCodeSnippet": "&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;"
						}
					]
				}
			},
			{
				"key": "a09e794c-6f1d-4bef-be05-e538d040a522",
				"type": "CODE_SMELL",
				"severity": "MINOR",
				"message": "A form label must be associated with a control.",
				"component": "Juice-Shop:templates/vulnerabilities/directory-traversal.html",
				"line": 13,
				"tags": ["accessibility"],
				"rule": {
					"key": "Web:S6853",
					"name": "Label elements should have a text label and an associated control",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>If you have a pair of control and <code>&lt;label&gt;</code> elements, make sure that the <code>&lt;label&gt;</code> wraps the control element. If\nyou lack a control element, add one.</p>\n<p>It is strongly recommended to avoid using generated <code>id</code>s since they must be deterministic.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;\n</pre>",
							"problemCodeSnippet": "&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;",
							"remediationCodeSnippet": "&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;"
						}
					]
				}
			},
			{
				"key": "8a803082-a934-4674-9576-a6d0c496b1ff",
				"type": "CODE_SMELL",
				"severity": "MINOR",
				"message": "A form label must be associated with a control.",
				"component": "Juice-Shop:templates/vulnerabilities/dom-xss.html",
				"line": 13,
				"tags": ["accessibility"],
				"rule": {
					"key": "Web:S6853",
					"name": "Label elements should have a text label and an associated control",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>If you have a pair of control and <code>&lt;label&gt;</code> elements, make sure that the <code>&lt;label&gt;</code> wraps the control element. If\nyou lack a control element, add one.</p>\n<p>It is strongly recommended to avoid using generated <code>id</code>s since they must be deterministic.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;\n</pre>",
							"problemCodeSnippet": "&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;",
							"remediationCodeSnippet": "&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;"
						}
					]
				}
			},
			{
				"key": "fe3aac94-6360-4328-98b6-a9025e23154c",
				"type": "CODE_SMELL",
				"severity": "MINOR",
				"message": "A form label must be associated with a control.",
				"component": "Juice-Shop:templates/vulnerabilities/html-injection.html",
				"line": 13,
				"tags": ["accessibility"],
				"rule": {
					"key": "Web:S6853",
					"name": "Label elements should have a text label and an associated control",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>If you have a pair of control and <code>&lt;label&gt;</code> elements, make sure that the <code>&lt;label&gt;</code> wraps the control element. If\nyou lack a control element, add one.</p>\n<p>It is strongly recommended to avoid using generated <code>id</code>s since they must be deterministic.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;\n</pre>",
							"problemCodeSnippet": "&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;",
							"remediationCodeSnippet": "&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;"
						}
					]
				}
			},
			{
				"key": "43c96d20-2883-4855-9d1f-cdd713160599",
				"type": "CODE_SMELL",
				"severity": "MINOR",
				"message": "A form label must be associated with a control.",
				"component": "Juice-Shop:templates/vulnerabilities/sensitive-data-exposure-medium.html",
				"line": 13,
				"tags": ["accessibility"],
				"rule": {
					"key": "Web:S6853",
					"name": "Label elements should have a text label and an associated control",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>If you have a pair of control and <code>&lt;label&gt;</code> elements, make sure that the <code>&lt;label&gt;</code> wraps the control element. If\nyou lack a control element, add one.</p>\n<p>It is strongly recommended to avoid using generated <code>id</code>s since they must be deterministic.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;\n</pre>",
							"problemCodeSnippet": "&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;",
							"remediationCodeSnippet": "&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;"
						}
					]
				}
			},
			{
				"key": "9be03df8-a1ff-4ccb-9c36-989f4ebcebd1",
				"type": "CODE_SMELL",
				"severity": "MINOR",
				"message": "A form label must be associated with a control.",
				"component": "Juice-Shop:templates/vulnerabilities/sql-injection.html",
				"line": 31,
				"tags": ["accessibility"],
				"rule": {
					"key": "Web:S6853",
					"name": "Label elements should have a text label and an associated control",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>If you have a pair of control and <code>&lt;label&gt;</code> elements, make sure that the <code>&lt;label&gt;</code> wraps the control element. If\nyou lack a control element, add one.</p>\n<p>It is strongly recommended to avoid using generated <code>id</code>s since they must be deterministic.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;\n</pre>",
							"problemCodeSnippet": "&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;",
							"remediationCodeSnippet": "&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;"
						}
					]
				}
			},
			{
				"key": "4f791c5d-4749-48a7-b07d-42f9d78b0fb3",
				"type": "CODE_SMELL",
				"severity": "MINOR",
				"message": "A form label must be associated with a control.",
				"component": "Juice-Shop:templates/vulnerabilities/stored-html-injection.html",
				"line": 13,
				"tags": ["accessibility"],
				"rule": {
					"key": "Web:S6853",
					"name": "Label elements should have a text label and an associated control",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>If you have a pair of control and <code>&lt;label&gt;</code> elements, make sure that the <code>&lt;label&gt;</code> wraps the control element. If\nyou lack a control element, add one.</p>\n<p>It is strongly recommended to avoid using generated <code>id</code>s since they must be deterministic.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;\n</pre>",
							"problemCodeSnippet": "&lt;input type=\"text\" /&gt;\n&lt;label&gt;Favorite food&lt;/label&gt;",
							"remediationCodeSnippet": "&lt;label&gt;\n  &lt;input type=\"text\" /&gt;\n  Favorite food\n&lt;/label&gt;"
						}
					]
				}
			},
			{
				"key": "e2bbd27b-d358-48bb-ab97-73c26a1f34c6",
				"type": "CODE_SMELL",
				"severity": "MINOR",
				"message": "Remove redundant word \"image\" from the \"alt\" attribute of your \"img\" tag.",
				"component": "Juice-Shop:templates/vulnerabilities/directory-traversal.html",
				"line": 23,
				"tags": ["accessibility"],
				"rule": {
					"key": "Web:S6851",
					"name": "Images should have a non-redundant alternate description",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>To fix this issue, you should revise the <code>alt</code> attribute of your <code>&lt;img&gt;</code> elements to remove any instances of the words\n\"image\", \"picture\", or \"photo\". Instead, provide a concise and accurate description of the image content that adds value for users who cannot see the\nimage.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;img src=\"sunrise.jpg\" alt=\"image of a sunrise\" /&gt; &lt;!-- Noncompliant: \"Image, image of a sunrise\" --&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;img src=\"sunrise.jpg\" alt=\"a sunrise over a mountain range\" /&gt;\n</pre>",
							"problemCodeSnippet": "&lt;img src=\"sunrise.jpg\" alt=\"image of a sunrise\" /&gt; &lt;!-- Noncompliant: \"Image, image of a sunrise\" --&gt;",
							"remediationCodeSnippet": "&lt;img src=\"sunrise.jpg\" alt=\"a sunrise over a mountain range\" /&gt;"
						}
					]
				}
			},
			{
				"key": "6be99793-cdee-41ac-924a-5d0c4d85aefe",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Refactor this function to reduce its Cognitive Complexity from 21 to the 15 allowed.",
				"component": "Juice-Shop:app.py",
				"line": 530,
				"tags": ["brain-overload"],
				"rule": {
					"key": "python:S3776",
					"name": "Cognitive Complexity of functions should not be too high",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Reducing cognitive complexity can be challenging.<br> Here are a few suggestions:</p>\n<ul>\n  <li> <strong>Extract complex conditions in a new function.</strong><br> Mixed operators in condition will increase complexity. Extracting the\n  condition in a new function with an appropriate name will reduce cognitive load. </li>\n  <li> <strong>Break down large functions.</strong><br> Large functions can be hard to understand and maintain. If a function is doing too many\n  things, consider breaking it down into smaller, more manageable functions. Each function should have a single responsibility. </li>\n  <li> <strong>Avoid deep nesting by returning early.</strong><br> To avoid the nesting of conditions, process exceptional cases first and return\n  early. </li>\n</ul>\n\n<p><strong>Extraction of a complex condition in a new function.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The code is using a complex condition and has a cognitive cost of 5.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()\n</pre>\n<h4>Compliant solution</h4>\n<p>Even if the cognitive complexity of the whole program did not change, it is easier for a reader to understand the code of the\n<code>process_eligible_users</code> function, which now only has a cognitive cost of 3.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)\n</pre>\n<p><strong>Break down large functions.</strong></p>\n<h4>Noncompliant code example</h4>\n<p><em>Note:</em> The code is simplified here, to illustrate the purpose. Please imagine there is more happening in the process.<br></p>\n<p>The bellow code has a cognitive complexity score of 8.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process active user with profile\n        else:                        # +1 (else)\n            ... # process active user without profile\n    else:                            # +1 (else)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process inactive user with profile\n        else:                        # +1 (else)\n            ... # process inactive user without profile\n</pre>\n<p>This function could be refactored into smaller functions: The complexity is spread over multiple functions and the breaks in flow are no more\nnested.<br> The <code>process_user</code> has now a complexity score of two.</p>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        process_active_user(user)\n    else:                            # +1 (else)\n        process_inactive_user(user)\n\ndef process_active_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process active user with profile\n    else:                            # +1 (else)\n        ... # process active user without profile\n\ndef process_inactive_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process inactive user with profile\n    else:                            # +1 (else)\n        ... # process inactive user without profile\n</pre>\n<p><strong>Avoid deep nesting by returning early.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The below code has a cognitive complexity of 6.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\ndef calculate(data):\n    if data is not None:  # +1 (if)\n        total = 0\n        for item in data: # +1 (for) +1 (nested)\n            if item &gt; 0:  # +1 (if)  +2 (nested)\n                total += item * 2\n        return total\n</pre>\n<h4>Compliant solution</h4>\n<p>Checking for the edge case first flattens the <code>if</code> statements and reduces the cognitive complexity to 4.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\ndef calculate(data):\n    if data is None:      # +1 (if)\n        return None\n    total = 0\n    for item in data:     # +1 (for)\n        if item &gt; 0:      # +1 (if) +1 (nested)\n            total += item * 2\n    return total\n</pre>\n<h3>Pitfalls</h3>\n<p>As this code is complex, ensure that you have unit tests that cover the code before refactoring.</p>",
							"problemCodeSnippet": "def process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()",
							"remediationCodeSnippet": "def process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)"
						}
					]
				}
			},
			{
				"key": "9e2a06fb-a440-421c-9eef-2466c2cc4386",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal 'settings.html' 3 times.",
				"component": "Juice-Shop:app.py",
				"line": 112,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "a0ee0073-6ec7-4d3d-9258-ceeb29ac209d",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal \"Try Harder\" 9 times.",
				"component": "Juice-Shop:app.py",
				"line": 406,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "ec900d25-d229-4578-ac52-f06de373bf81",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Refactor this function to reduce its Cognitive Complexity from 37 to the 15 allowed.",
				"component": "Juice-Shop:app.py",
				"line": 615,
				"tags": ["brain-overload"],
				"rule": {
					"key": "python:S3776",
					"name": "Cognitive Complexity of functions should not be too high",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Reducing cognitive complexity can be challenging.<br> Here are a few suggestions:</p>\n<ul>\n  <li> <strong>Extract complex conditions in a new function.</strong><br> Mixed operators in condition will increase complexity. Extracting the\n  condition in a new function with an appropriate name will reduce cognitive load. </li>\n  <li> <strong>Break down large functions.</strong><br> Large functions can be hard to understand and maintain. If a function is doing too many\n  things, consider breaking it down into smaller, more manageable functions. Each function should have a single responsibility. </li>\n  <li> <strong>Avoid deep nesting by returning early.</strong><br> To avoid the nesting of conditions, process exceptional cases first and return\n  early. </li>\n</ul>\n\n<p><strong>Extraction of a complex condition in a new function.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The code is using a complex condition and has a cognitive cost of 5.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()\n</pre>\n<h4>Compliant solution</h4>\n<p>Even if the cognitive complexity of the whole program did not change, it is easier for a reader to understand the code of the\n<code>process_eligible_users</code> function, which now only has a cognitive cost of 3.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)\n</pre>\n<p><strong>Break down large functions.</strong></p>\n<h4>Noncompliant code example</h4>\n<p><em>Note:</em> The code is simplified here, to illustrate the purpose. Please imagine there is more happening in the process.<br></p>\n<p>The bellow code has a cognitive complexity score of 8.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process active user with profile\n        else:                        # +1 (else)\n            ... # process active user without profile\n    else:                            # +1 (else)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process inactive user with profile\n        else:                        # +1 (else)\n            ... # process inactive user without profile\n</pre>\n<p>This function could be refactored into smaller functions: The complexity is spread over multiple functions and the breaks in flow are no more\nnested.<br> The <code>process_user</code> has now a complexity score of two.</p>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        process_active_user(user)\n    else:                            # +1 (else)\n        process_inactive_user(user)\n\ndef process_active_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process active user with profile\n    else:                            # +1 (else)\n        ... # process active user without profile\n\ndef process_inactive_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process inactive user with profile\n    else:                            # +1 (else)\n        ... # process inactive user without profile\n</pre>\n<p><strong>Avoid deep nesting by returning early.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The below code has a cognitive complexity of 6.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\ndef calculate(data):\n    if data is not None:  # +1 (if)\n        total = 0\n        for item in data: # +1 (for) +1 (nested)\n            if item &gt; 0:  # +1 (if)  +2 (nested)\n                total += item * 2\n        return total\n</pre>\n<h4>Compliant solution</h4>\n<p>Checking for the edge case first flattens the <code>if</code> statements and reduces the cognitive complexity to 4.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\ndef calculate(data):\n    if data is None:      # +1 (if)\n        return None\n    total = 0\n    for item in data:     # +1 (for)\n        if item &gt; 0:      # +1 (if) +1 (nested)\n            total += item * 2\n    return total\n</pre>\n<h3>Pitfalls</h3>\n<p>As this code is complex, ensure that you have unit tests that cover the code before refactoring.</p>",
							"problemCodeSnippet": "def process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()",
							"remediationCodeSnippet": "def process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)"
						}
					]
				}
			},
			{
				"key": "e256f876-d8d4-42ac-a791-81103d782e4a",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal \"vulnerabilities/directory-traversal.html\" 10 times.",
				"component": "Juice-Shop:app.py",
				"line": 621,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "baec2429-ca35-4584-93b6-fbf16380a588",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal \"/Images\" 3 times.",
				"component": "Juice-Shop:app.py",
				"line": 625,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "b0deaae9-aa2b-43ab-8434-fa89123bf6c8",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal 'vulnerabilities/brute-force.html' 3 times.",
				"component": "Juice-Shop:app.py",
				"line": 583,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "826277e5-1a6f-4d13-91ea-a5f0da339802",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Refactor this function to reduce its Cognitive Complexity from 18 to the 15 allowed.",
				"component": "Juice-Shop:app.py",
				"line": 472,
				"tags": ["brain-overload"],
				"rule": {
					"key": "python:S3776",
					"name": "Cognitive Complexity of functions should not be too high",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Reducing cognitive complexity can be challenging.<br> Here are a few suggestions:</p>\n<ul>\n  <li> <strong>Extract complex conditions in a new function.</strong><br> Mixed operators in condition will increase complexity. Extracting the\n  condition in a new function with an appropriate name will reduce cognitive load. </li>\n  <li> <strong>Break down large functions.</strong><br> Large functions can be hard to understand and maintain. If a function is doing too many\n  things, consider breaking it down into smaller, more manageable functions. Each function should have a single responsibility. </li>\n  <li> <strong>Avoid deep nesting by returning early.</strong><br> To avoid the nesting of conditions, process exceptional cases first and return\n  early. </li>\n</ul>\n\n<p><strong>Extraction of a complex condition in a new function.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The code is using a complex condition and has a cognitive cost of 5.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()\n</pre>\n<h4>Compliant solution</h4>\n<p>Even if the cognitive complexity of the whole program did not change, it is easier for a reader to understand the code of the\n<code>process_eligible_users</code> function, which now only has a cognitive cost of 3.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)\n</pre>\n<p><strong>Break down large functions.</strong></p>\n<h4>Noncompliant code example</h4>\n<p><em>Note:</em> The code is simplified here, to illustrate the purpose. Please imagine there is more happening in the process.<br></p>\n<p>The bellow code has a cognitive complexity score of 8.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process active user with profile\n        else:                        # +1 (else)\n            ... # process active user without profile\n    else:                            # +1 (else)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process inactive user with profile\n        else:                        # +1 (else)\n            ... # process inactive user without profile\n</pre>\n<p>This function could be refactored into smaller functions: The complexity is spread over multiple functions and the breaks in flow are no more\nnested.<br> The <code>process_user</code> has now a complexity score of two.</p>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        process_active_user(user)\n    else:                            # +1 (else)\n        process_inactive_user(user)\n\ndef process_active_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process active user with profile\n    else:                            # +1 (else)\n        ... # process active user without profile\n\ndef process_inactive_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process inactive user with profile\n    else:                            # +1 (else)\n        ... # process inactive user without profile\n</pre>\n<p><strong>Avoid deep nesting by returning early.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The below code has a cognitive complexity of 6.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\ndef calculate(data):\n    if data is not None:  # +1 (if)\n        total = 0\n        for item in data: # +1 (for) +1 (nested)\n            if item &gt; 0:  # +1 (if)  +2 (nested)\n                total += item * 2\n        return total\n</pre>\n<h4>Compliant solution</h4>\n<p>Checking for the edge case first flattens the <code>if</code> statements and reduces the cognitive complexity to 4.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\ndef calculate(data):\n    if data is None:      # +1 (if)\n        return None\n    total = 0\n    for item in data:     # +1 (for)\n        if item &gt; 0:      # +1 (if) +1 (nested)\n            total += item * 2\n    return total\n</pre>\n<h3>Pitfalls</h3>\n<p>As this code is complex, ensure that you have unit tests that cover the code before refactoring.</p>",
							"problemCodeSnippet": "def process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()",
							"remediationCodeSnippet": "def process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)"
						}
					]
				}
			},
			{
				"key": "60b364b5-5315-4fff-9885-d7d5ea98fbe0",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal 'vulnerabilities/html-injection.html' 3 times.",
				"component": "Juice-Shop:app.py",
				"line": 475,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "4ceddba5-ace8-4e13-b0e7-615032eab5a8",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Refactor this function to reduce its Cognitive Complexity from 18 to the 15 allowed.",
				"component": "Juice-Shop:app.py",
				"line": 679,
				"tags": ["brain-overload"],
				"rule": {
					"key": "python:S3776",
					"name": "Cognitive Complexity of functions should not be too high",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Reducing cognitive complexity can be challenging.<br> Here are a few suggestions:</p>\n<ul>\n  <li> <strong>Extract complex conditions in a new function.</strong><br> Mixed operators in condition will increase complexity. Extracting the\n  condition in a new function with an appropriate name will reduce cognitive load. </li>\n  <li> <strong>Break down large functions.</strong><br> Large functions can be hard to understand and maintain. If a function is doing too many\n  things, consider breaking it down into smaller, more manageable functions. Each function should have a single responsibility. </li>\n  <li> <strong>Avoid deep nesting by returning early.</strong><br> To avoid the nesting of conditions, process exceptional cases first and return\n  early. </li>\n</ul>\n\n<p><strong>Extraction of a complex condition in a new function.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The code is using a complex condition and has a cognitive cost of 5.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()\n</pre>\n<h4>Compliant solution</h4>\n<p>Even if the cognitive complexity of the whole program did not change, it is easier for a reader to understand the code of the\n<code>process_eligible_users</code> function, which now only has a cognitive cost of 3.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)\n</pre>\n<p><strong>Break down large functions.</strong></p>\n<h4>Noncompliant code example</h4>\n<p><em>Note:</em> The code is simplified here, to illustrate the purpose. Please imagine there is more happening in the process.<br></p>\n<p>The bellow code has a cognitive complexity score of 8.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process active user with profile\n        else:                        # +1 (else)\n            ... # process active user without profile\n    else:                            # +1 (else)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process inactive user with profile\n        else:                        # +1 (else)\n            ... # process inactive user without profile\n</pre>\n<p>This function could be refactored into smaller functions: The complexity is spread over multiple functions and the breaks in flow are no more\nnested.<br> The <code>process_user</code> has now a complexity score of two.</p>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        process_active_user(user)\n    else:                            # +1 (else)\n        process_inactive_user(user)\n\ndef process_active_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process active user with profile\n    else:                            # +1 (else)\n        ... # process active user without profile\n\ndef process_inactive_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process inactive user with profile\n    else:                            # +1 (else)\n        ... # process inactive user without profile\n</pre>\n<p><strong>Avoid deep nesting by returning early.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The below code has a cognitive complexity of 6.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\ndef calculate(data):\n    if data is not None:  # +1 (if)\n        total = 0\n        for item in data: # +1 (for) +1 (nested)\n            if item &gt; 0:  # +1 (if)  +2 (nested)\n                total += item * 2\n        return total\n</pre>\n<h4>Compliant solution</h4>\n<p>Checking for the edge case first flattens the <code>if</code> statements and reduces the cognitive complexity to 4.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\ndef calculate(data):\n    if data is None:      # +1 (if)\n        return None\n    total = 0\n    for item in data:     # +1 (for)\n        if item &gt; 0:      # +1 (if) +1 (nested)\n            total += item * 2\n    return total\n</pre>\n<h3>Pitfalls</h3>\n<p>As this code is complex, ensure that you have unit tests that cover the code before refactoring.</p>",
							"problemCodeSnippet": "def process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()",
							"remediationCodeSnippet": "def process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)"
						}
					]
				}
			},
			{
				"key": "b5611d04-9655-465c-a245-30829bc30a77",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal 'vulnerabilities/insecure-file-upload.html' 5 times.",
				"component": "Juice-Shop:app.py",
				"line": 533,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "5f2e3f57-8059-4b51-b638-6aa2b886edb8",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal \"No file selected!\" 3 times.",
				"component": "Juice-Shop:app.py",
				"line": 539,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "3382c216-4e59-4b1c-bbcb-797645fd946a",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal \"File uploaded successfully!\" 3 times.",
				"component": "Juice-Shop:app.py",
				"line": 544,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "77cca9fc-c388-48e0-b2a5-89728fdfae56",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal 'vulnerabilities/sql-injection.html' 6 times.",
				"component": "Juice-Shop:app.py",
				"line": 140,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "3e94dfa9-5fe4-4f62-95c3-d8a2dc91f837",
				"type": "CODE_SMELL",
				"severity": "MINOR",
				"message": "Rename this local variable \"usernameId\" to match the regular expression ^[_a-z][a-z0-9_]*$.",
				"component": "Juice-Shop:app.py",
				"line": 187,
				"tags": ["convention"],
				"rule": {
					"key": "python:S117",
					"name": "Local variable and function parameter names should comply with a naming convention",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>First, familiarize yourself with the particular naming convention of the project in question. Then, update the name to match the convention, as\nwell as all usages of the name. For many IDEs, you can use built-in renaming and refactoring features to update all usages at once.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default regular expression <code>^[_a-z][a-z0-9_]*$</code>:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef print_something(IMPORTANT_PARAM): # Noncompliant\n    localVariable = \"\" # Noncompliant\n    print(IMPORTANT_PARAM + localVariable)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef print_something(important_param):\n    local_variable = \"\"\n    print(important_param + local_variable)\n</pre>",
							"problemCodeSnippet": "def print_something(IMPORTANT_PARAM): # Noncompliant\n    localVariable = \"\" # Noncompliant\n    print(IMPORTANT_PARAM + localVariable)",
							"remediationCodeSnippet": "def print_something(important_param):\n    local_variable = \"\"\n    print(important_param + local_variable)"
						}
					]
				}
			},
			{
				"key": "fedafb77-8688-4ac6-a08e-e4419fc8d3e3",
				"type": "CODE_SMELL",
				"severity": "MAJOR",
				"message": "Use <dialog> instead of the dialog role to ensure accessibility across all devices.",
				"component": "Juice-Shop:templates/vulnerabilities/blind-sql-injection.html",
				"line": 52,
				"tags": ["accessibility"],
				"rule": {
					"key": "Web:S6819",
					"name": "Prefer tag over ARIA role",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": []
				}
			},
			{
				"key": "e1618b63-4fb5-4051-9ac6-69ba83ca066c",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal \"SELECT userid, username FROM users WHERE userid='%s'\" 4 times.",
				"component": "Juice-Shop:vulnerabilities/SQLi.py",
				"line": 40,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "295c18af-d1f9-452f-8d27-920297a8c1fe",
				"type": "CODE_SMELL",
				"severity": "MINOR",
				"message": "Rename this local variable \"usernameId\" to match the regular expression ^[_a-z][a-z0-9_]*$.",
				"component": "Juice-Shop:app.py",
				"line": 158,
				"tags": ["convention"],
				"rule": {
					"key": "python:S117",
					"name": "Local variable and function parameter names should comply with a naming convention",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>First, familiarize yourself with the particular naming convention of the project in question. Then, update the name to match the convention, as\nwell as all usages of the name. For many IDEs, you can use built-in renaming and refactoring features to update all usages at once.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default regular expression <code>^[_a-z][a-z0-9_]*$</code>:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef print_something(IMPORTANT_PARAM): # Noncompliant\n    localVariable = \"\" # Noncompliant\n    print(IMPORTANT_PARAM + localVariable)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef print_something(important_param):\n    local_variable = \"\"\n    print(important_param + local_variable)\n</pre>",
							"problemCodeSnippet": "def print_something(IMPORTANT_PARAM): # Noncompliant\n    localVariable = \"\" # Noncompliant\n    print(IMPORTANT_PARAM + localVariable)",
							"remediationCodeSnippet": "def print_something(important_param):\n    local_variable = \"\"\n    print(important_param + local_variable)"
						}
					]
				}
			},
			{
				"key": "30b3671f-ab86-42b7-a2ff-75ac2ffba0d4",
				"type": "CODE_SMELL",
				"severity": "MAJOR",
				"message": "Use <dialog> instead of the dialog role to ensure accessibility across all devices.",
				"component": "Juice-Shop:templates/vulnerabilities/sql-injection.html",
				"line": 52,
				"tags": ["accessibility"],
				"rule": {
					"key": "Web:S6819",
					"name": "Prefer tag over ARIA role",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": []
				}
			},
			{
				"key": "e561e37f-7ef0-4ad0-becd-476cc26787fb",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Refactor this function to reduce its Cognitive Complexity from 17 to the 15 allowed.",
				"component": "Juice-Shop:app.py",
				"line": 395,
				"tags": ["brain-overload"],
				"rule": {
					"key": "python:S3776",
					"name": "Cognitive Complexity of functions should not be too high",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Reducing cognitive complexity can be challenging.<br> Here are a few suggestions:</p>\n<ul>\n  <li> <strong>Extract complex conditions in a new function.</strong><br> Mixed operators in condition will increase complexity. Extracting the\n  condition in a new function with an appropriate name will reduce cognitive load. </li>\n  <li> <strong>Break down large functions.</strong><br> Large functions can be hard to understand and maintain. If a function is doing too many\n  things, consider breaking it down into smaller, more manageable functions. Each function should have a single responsibility. </li>\n  <li> <strong>Avoid deep nesting by returning early.</strong><br> To avoid the nesting of conditions, process exceptional cases first and return\n  early. </li>\n</ul>\n\n<p><strong>Extraction of a complex condition in a new function.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The code is using a complex condition and has a cognitive cost of 5.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()\n</pre>\n<h4>Compliant solution</h4>\n<p>Even if the cognitive complexity of the whole program did not change, it is easier for a reader to understand the code of the\n<code>process_eligible_users</code> function, which now only has a cognitive cost of 3.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)\n</pre>\n<p><strong>Break down large functions.</strong></p>\n<h4>Noncompliant code example</h4>\n<p><em>Note:</em> The code is simplified here, to illustrate the purpose. Please imagine there is more happening in the process.<br></p>\n<p>The bellow code has a cognitive complexity score of 8.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process active user with profile\n        else:                        # +1 (else)\n            ... # process active user without profile\n    else:                            # +1 (else)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process inactive user with profile\n        else:                        # +1 (else)\n            ... # process inactive user without profile\n</pre>\n<p>This function could be refactored into smaller functions: The complexity is spread over multiple functions and the breaks in flow are no more\nnested.<br> The <code>process_user</code> has now a complexity score of two.</p>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        process_active_user(user)\n    else:                            # +1 (else)\n        process_inactive_user(user)\n\ndef process_active_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process active user with profile\n    else:                            # +1 (else)\n        ... # process active user without profile\n\ndef process_inactive_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process inactive user with profile\n    else:                            # +1 (else)\n        ... # process inactive user without profile\n</pre>\n<p><strong>Avoid deep nesting by returning early.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The below code has a cognitive complexity of 6.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\ndef calculate(data):\n    if data is not None:  # +1 (if)\n        total = 0\n        for item in data: # +1 (for) +1 (nested)\n            if item &gt; 0:  # +1 (if)  +2 (nested)\n                total += item * 2\n        return total\n</pre>\n<h4>Compliant solution</h4>\n<p>Checking for the edge case first flattens the <code>if</code> statements and reduces the cognitive complexity to 4.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\ndef calculate(data):\n    if data is None:      # +1 (if)\n        return None\n    total = 0\n    for item in data:     # +1 (for)\n        if item &gt; 0:      # +1 (if) +1 (nested)\n            total += item * 2\n    return total\n</pre>\n<h3>Pitfalls</h3>\n<p>As this code is complex, ensure that you have unit tests that cover the code before refactoring.</p>",
							"problemCodeSnippet": "def process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()",
							"remediationCodeSnippet": "def process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)"
						}
					]
				}
			},
			{
				"key": "64acce97-5d8a-42ec-acd8-3f2dee1e1b16",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal \"<script>\" 4 times.",
				"component": "Juice-Shop:app.py",
				"line": 405,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "81c7b3f3-2765-466b-8952-7d198de2e8f5",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Refactor this function to reduce its Cognitive Complexity from 21 to the 15 allowed.",
				"component": "Juice-Shop:app.py",
				"line": 445,
				"tags": ["brain-overload"],
				"rule": {
					"key": "python:S3776",
					"name": "Cognitive Complexity of functions should not be too high",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Reducing cognitive complexity can be challenging.<br> Here are a few suggestions:</p>\n<ul>\n  <li> <strong>Extract complex conditions in a new function.</strong><br> Mixed operators in condition will increase complexity. Extracting the\n  condition in a new function with an appropriate name will reduce cognitive load. </li>\n  <li> <strong>Break down large functions.</strong><br> Large functions can be hard to understand and maintain. If a function is doing too many\n  things, consider breaking it down into smaller, more manageable functions. Each function should have a single responsibility. </li>\n  <li> <strong>Avoid deep nesting by returning early.</strong><br> To avoid the nesting of conditions, process exceptional cases first and return\n  early. </li>\n</ul>\n\n<p><strong>Extraction of a complex condition in a new function.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The code is using a complex condition and has a cognitive cost of 5.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()\n</pre>\n<h4>Compliant solution</h4>\n<p>Even if the cognitive complexity of the whole program did not change, it is easier for a reader to understand the code of the\n<code>process_eligible_users</code> function, which now only has a cognitive cost of 3.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)\n</pre>\n<p><strong>Break down large functions.</strong></p>\n<h4>Noncompliant code example</h4>\n<p><em>Note:</em> The code is simplified here, to illustrate the purpose. Please imagine there is more happening in the process.<br></p>\n<p>The bellow code has a cognitive complexity score of 8.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process active user with profile\n        else:                        # +1 (else)\n            ... # process active user without profile\n    else:                            # +1 (else)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process inactive user with profile\n        else:                        # +1 (else)\n            ... # process inactive user without profile\n</pre>\n<p>This function could be refactored into smaller functions: The complexity is spread over multiple functions and the breaks in flow are no more\nnested.<br> The <code>process_user</code> has now a complexity score of two.</p>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        process_active_user(user)\n    else:                            # +1 (else)\n        process_inactive_user(user)\n\ndef process_active_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process active user with profile\n    else:                            # +1 (else)\n        ... # process active user without profile\n\ndef process_inactive_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process inactive user with profile\n    else:                            # +1 (else)\n        ... # process inactive user without profile\n</pre>\n<p><strong>Avoid deep nesting by returning early.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The below code has a cognitive complexity of 6.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\ndef calculate(data):\n    if data is not None:  # +1 (if)\n        total = 0\n        for item in data: # +1 (for) +1 (nested)\n            if item &gt; 0:  # +1 (if)  +2 (nested)\n                total += item * 2\n        return total\n</pre>\n<h4>Compliant solution</h4>\n<p>Checking for the edge case first flattens the <code>if</code> statements and reduces the cognitive complexity to 4.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\ndef calculate(data):\n    if data is None:      # +1 (if)\n        return None\n    total = 0\n    for item in data:     # +1 (for)\n        if item &gt; 0:      # +1 (if) +1 (nested)\n            total += item * 2\n    return total\n</pre>\n<h3>Pitfalls</h3>\n<p>As this code is complex, ensure that you have unit tests that cover the code before refactoring.</p>",
							"problemCodeSnippet": "def process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()",
							"remediationCodeSnippet": "def process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)"
						}
					]
				}
			},
			{
				"key": "5ce9d420-4c3b-4238-a457-15d7087fd40a",
				"type": "CODE_SMELL",
				"severity": "MAJOR",
				"message": "Merge this if statement with the enclosing one.",
				"component": "Juice-Shop:app.py",
				"line": 460,
				"tags": ["clumsy"],
				"rule": {
					"key": "python:S1066",
					"name": "Mergeable \"if\" statements should be combined",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>If merging the conditions seems to result in a more complex code, extracting the condition or part of it in a named function or variable is a\nbetter approach to fix readability.</p>\n\n<h4>Noncompliant code example</h4>\n<pre>\nif file.isValid():\n  if file.isfile() or file.isdir():     # Noncompliant\n    # ...\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef isFileOrDirectory(File file):\n  return file.isFile() or file.isDirectory()\n\nif file.isValid() and isFileOrDirectory(file): # Compliant\n  # ...\n</pre>",
							"problemCodeSnippet": "No problem code snippet available",
							"remediationCodeSnippet": "No remediation code snippet available"
						}
					]
				}
			},
			{
				"key": "b78b8fff-71f1-411a-b2ea-5027c43fdab6",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal 'vulnerabilities/ssrf.html' 4 times.",
				"component": "Juice-Shop:app.py",
				"line": 714,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "9f1bc61b-cadd-4ec7-b696-56b6d35f5632",
				"type": "CODE_SMELL",
				"severity": "MAJOR",
				"message": "Remove this commented out code.",
				"component": "Juice-Shop:app.py",
				"line": 794,
				"tags": ["unused"],
				"rule": {
					"key": "python:S125",
					"name": "Sections of code should not be commented out",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": []
				}
			},
			{
				"key": "9662dbaf-5112-4a21-b494-01952f545ed1",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal 'vulnerabilities/ssti.html' 3 times.",
				"component": "Juice-Shop:app.py",
				"line": 772,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "631029ea-378b-4e06-bdd4-50f6fb14add9",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal \"File not Found\" 3 times.",
				"component": "Juice-Shop:app.py",
				"line": 633,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "06e26280-3c41-4c1e-90f5-61d16fe5ac4e",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal 'vulnerabilities/csrf.html' 5 times.",
				"component": "Juice-Shop:app.py",
				"line": 683,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "0bc6373b-8cd4-436b-b949-c64fbf628b02",
				"type": "BUG",
				"severity": "MAJOR",
				"message": "Add \"<th>\" headers to this \"<table>\".",
				"component": "Juice-Shop:templates/settings.html",
				"line": 15,
				"tags": ["accessibility", "wcag2-a"],
				"rule": {
					"key": "Web:S5256",
					"name": "Tables should have headers",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>The first <code>&lt;tr&gt;</code> of the table should contain <code>&lt;th&gt;</code> elements, with the appropriate description of what the data\nin those columns represents.</p>\n<h3>Going the extra mile</h3>\n<p>Headers should be properly associated with the corresponding <code>&lt;td&gt;</code> cells by using either a <code>scope</code> attribute or\n<code>headers</code> and <code>id</code> attributes. See <a href=\"https://www.w3.org/WAI/tutorials/tables/tips/\">W3C WAI Web Accessibility\nTutorials</a> for more information.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;table&gt; &lt;!-- Noncompliant --&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Name&lt;/td&gt;\n    &lt;td&gt;Age&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;John Doe&lt;/td&gt;\n    &lt;td&gt;24&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Alice Doe&lt;/td&gt;\n    &lt;td&gt;54&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th scope=\"col\"&gt;Name&lt;/th&gt;\n    &lt;th scope=\"col\"&gt;Age&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;John Doe&lt;/td&gt;\n    &lt;td&gt;24&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Alice Doe&lt;/td&gt;\n    &lt;td&gt;54&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</pre>",
							"problemCodeSnippet": "&lt;table&gt; &lt;!-- Noncompliant --&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Name&lt;/td&gt;\n    &lt;td&gt;Age&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;John Doe&lt;/td&gt;\n    &lt;td&gt;24&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Alice Doe&lt;/td&gt;\n    &lt;td&gt;54&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;",
							"remediationCodeSnippet": "&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th scope=\"col\"&gt;Name&lt;/th&gt;\n    &lt;th scope=\"col\"&gt;Age&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;John Doe&lt;/td&gt;\n    &lt;td&gt;24&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Alice Doe&lt;/td&gt;\n    &lt;td&gt;54&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;"
						}
					]
				}
			},
			{
				"key": "077defa4-fbd2-4792-894b-b2407135fd27",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal 'vulnerabilities/sensitive-data-exposure-medium.html' 9 times.",
				"component": "Juice-Shop:app.py",
				"line": 284,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "6bbba937-06fb-4bbf-93bf-62a98258bae4",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal \"Invalid ID\" 3 times.",
				"component": "Juice-Shop:app.py",
				"line": 309,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "298fd6a5-74b5-4a4b-9cff-3a666bd5242c",
				"type": "CODE_SMELL",
				"severity": "MAJOR",
				"message": "Headings must have content and the content must be accessible by a screen reader.",
				"component": "Juice-Shop:templates/vulnerabilities/xml-external-entities.html",
				"line": 20,
				"tags": ["accessibility"],
				"rule": {
					"key": "Web:S6850",
					"name": "Heading elements should have accessible content",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Do not leave empty your heading elements.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;h1&gt;JavaScript Programming Guide&lt;/h1&gt;\n&lt;p&gt;An introduction to JavaScript programming and its applications.&lt;/p&gt;\n\n&lt;h2&gt;JavaScript Basics&lt;/h2&gt;\n&lt;p&gt;Understanding the basic concepts in JavaScript programming.&lt;/p&gt;\n\n&lt;h3&gt;Variables&lt;/h3&gt;\n&lt;p&gt;Explanation of what variables are and how to declare them in JavaScript.&lt;/p&gt;\n\n&lt;h3 aria-hidden&gt;Data Types&lt;/h3&gt; &lt;!-- Noncompliant --&gt;\n&lt;p&gt;Overview of the different data types in JavaScript.&lt;/p&gt;\n\n&lt;h3 /&gt; &lt;!-- Noncompliant --&gt;\n&lt;p&gt;Understanding how to declare and use functions in JavaScript.&lt;/p&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;h1&gt;JavaScript Programming Guide&lt;/h1&gt;\n&lt;p&gt;An introduction to JavaScript programming and its applications.&lt;/p&gt;\n\n&lt;h2&gt;JavaScript Basics&lt;/h2&gt;\n&lt;p&gt;Understanding the basic concepts in JavaScript programming.&lt;/p&gt;\n\n&lt;h3&gt;Variables&lt;/h3&gt;\n&lt;p&gt;Explanation of what variables are and how to declare them in JavaScript.&lt;/p&gt;\n\n&lt;h3&gt;Data Types&lt;/h3&gt;\n&lt;p&gt;Overview of the different data types in JavaScript.&lt;/p&gt;\n\n&lt;h3&gt;Functions&lt;/h3&gt;\n&lt;p&gt;Understanding how to declare and use functions in JavaScript.&lt;/p&gt;\n</pre>",
							"problemCodeSnippet": "&lt;h1&gt;JavaScript Programming Guide&lt;/h1&gt;\n&lt;p&gt;An introduction to JavaScript programming and its applications.&lt;/p&gt;\n\n&lt;h2&gt;JavaScript Basics&lt;/h2&gt;\n&lt;p&gt;Understanding the basic concepts in JavaScript programming.&lt;/p&gt;\n\n&lt;h3&gt;Variables&lt;/h3&gt;\n&lt;p&gt;Explanation of what variables are and how to declare them in JavaScript.&lt;/p&gt;\n\n&lt;h3 aria-hidden&gt;Data Types&lt;/h3&gt; &lt;!-- Noncompliant --&gt;\n&lt;p&gt;Overview of the different data types in JavaScript.&lt;/p&gt;\n\n&lt;h3 /&gt; &lt;!-- Noncompliant --&gt;\n&lt;p&gt;Understanding how to declare and use functions in JavaScript.&lt;/p&gt;",
							"remediationCodeSnippet": "&lt;h1&gt;JavaScript Programming Guide&lt;/h1&gt;\n&lt;p&gt;An introduction to JavaScript programming and its applications.&lt;/p&gt;\n\n&lt;h2&gt;JavaScript Basics&lt;/h2&gt;\n&lt;p&gt;Understanding the basic concepts in JavaScript programming.&lt;/p&gt;\n\n&lt;h3&gt;Variables&lt;/h3&gt;\n&lt;p&gt;Explanation of what variables are and how to declare them in JavaScript.&lt;/p&gt;\n\n&lt;h3&gt;Data Types&lt;/h3&gt;\n&lt;p&gt;Overview of the different data types in JavaScript.&lt;/p&gt;\n\n&lt;h3&gt;Functions&lt;/h3&gt;\n&lt;p&gt;Understanding how to declare and use functions in JavaScript.&lt;/p&gt;"
						}
					]
				}
			},
			{
				"key": "b7a7ac0e-7c54-47af-831a-f905c0d1a663",
				"type": "CODE_SMELL",
				"severity": "MAJOR",
				"message": "Merge this if statement with the enclosing one.",
				"component": "Juice-Shop:helper/db_manager.py",
				"line": 31,
				"tags": ["clumsy"],
				"rule": {
					"key": "python:S1066",
					"name": "Mergeable \"if\" statements should be combined",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>If merging the conditions seems to result in a more complex code, extracting the condition or part of it in a named function or variable is a\nbetter approach to fix readability.</p>\n\n<h4>Noncompliant code example</h4>\n<pre>\nif file.isValid():\n  if file.isfile() or file.isdir():     # Noncompliant\n    # ...\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef isFileOrDirectory(File file):\n  return file.isFile() or file.isDirectory()\n\nif file.isValid() and isFileOrDirectory(file): # Compliant\n  # ...\n</pre>",
							"problemCodeSnippet": "No problem code snippet available",
							"remediationCodeSnippet": "No remediation code snippet available"
						}
					]
				}
			},
			{
				"key": "a8b2893f-c121-4316-a651-dd1b65b896d4",
				"type": "VULNERABILITY",
				"severity": "BLOCKER",
				"message": "Don't disclose \"Flask\" secret keys.",
				"component": "Juice-Shop:app.py",
				"line": 29,
				"tags": ["cwe", "flask"],
				"rule": {
					"key": "python:S6779",
					"name": "Flask secret keys should not be disclosed",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "30min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p><strong>Revoke the secret</strong></p>\n<p>Revoke any leaked secrets and remove them from the application source code.</p>\n<p>Before revoking the secret, ensure that no other applications or processes are using it. Other usages of the secret will also be impacted when the\nsecret is revoked.</p>\n<p>In Flask, changing the secret value is sufficient to invalidate any data that it protected.</p>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = \"secret\"  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import Flask\nimport os\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = os.environ[\"SECRET_KEY\"]\n</pre>",
							"problemCodeSnippet": "from flask import Flask\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = \"secret\"  # Noncompliant",
							"remediationCodeSnippet": "from flask import Flask\nimport os\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = os.environ[\"SECRET_KEY\"]"
						}
					]
				}
			},
			{
				"key": "cfb875e7-88d0-422d-a964-06daecfd4232",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Define a constant instead of duplicating this literal 'index.html' 3 times.",
				"component": "Juice-Shop:app.py",
				"line": 55,
				"tags": ["design"],
				"rule": {
					"key": "python:S1192",
					"name": "String literals should not be duplicated",
					"description": "No description available",
					"remediation": {
						"func": "LINEAR_OFFSET",
						"constantCost": "2min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>",
							"problemCodeSnippet": "def run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass",
							"remediationCodeSnippet": "ACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)"
						}
					]
				}
			},
			{
				"key": "2def6917-53b5-4719-b933-c17e8b640e1e",
				"type": "CODE_SMELL",
				"severity": "CRITICAL",
				"message": "Don't use `datetime.datetime.utcnow` to create this datetime object.",
				"component": "Juice-Shop:helper/auth.py",
				"line": 13,
				"tags": ["datetime", "pitfall"],
				"rule": {
					"key": "python:S6903",
					"name": "Using timezone-aware \"datetime\" objects should be preferred over using \"datetime.datetime.utcnow\" and \"datetime.datetime.utcfromtimestamp\"",
					"description": "No description available",
					"remediation": {
						"func": "CONSTANT_ISSUE",
						"constantCost": "5min"
					},
					"remediationSteps": [
						{
							"context": "General",
							"description": "<p>To fix this issue, prefer the usage of a timezone-aware datetime.</p>\n\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom datetime import datetime\n\ndatetime.utcnow() # Noncompliant\n\ntimestamp = 1571595618.0\ndatetime.utcfromtimestamp(timestamp) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom datetime import datetime, timezone\n\ndatetime.now(timezone.utc) # Compliant\n\ntimestamp = 1571595618.0\ndatetime.fromtimestamp(timestamp, timezone.utc) # Compliant\n</pre>",
							"problemCodeSnippet": "from datetime import datetime\n\ndatetime.utcnow() # Noncompliant\n\ntimestamp = 1571595618.0\ndatetime.utcfromtimestamp(timestamp) # Noncompliant",
							"remediationCodeSnippet": "from datetime import datetime, timezone\n\ndatetime.now(timezone.utc) # Compliant\n\ntimestamp = 1571595618.0\ndatetime.fromtimestamp(timestamp, timezone.utc) # Compliant"
						}
					]
				}
			}
		],
		"hotspots": [
			{
				"key": "86e700d4-43c6-4ef0-9217-ff4b4392e0e7",
				"status": "TO_REVIEW",
				"message": "\"password\" detected here, review this potentially hard-coded credential.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:helper/mongodb_manager.py",
				"line": 68
			},
			{
				"key": "4e30b166-babd-42df-830c-9aea2b10c346",
				"status": "TO_REVIEW",
				"message": "\"password\" detected here, review this potentially hard-coded credential.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:helper/mongodb_manager.py",
				"line": 69
			},
			{
				"key": "b3f48305-b9a3-40f9-9f52-f3249d706946",
				"status": "TO_REVIEW",
				"message": "Review this potentially hard-coded password.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:init-db.js",
				"line": 8
			},
			{
				"key": "f9613be7-9e89-4cfe-a27c-edcb424d4d78",
				"status": "TO_REVIEW",
				"message": "Review this potentially hard-coded password.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:init-db.js",
				"line": 12
			},
			{
				"key": "199b28ad-53b3-44c9-973d-ccb3568bd7b6",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 106
			},
			{
				"key": "a7075479-7458-4adf-b963-cc7f2c92902b",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 136
			},
			{
				"key": "f035caa2-2563-456d-ad76-f55b15c61441",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 165
			},
			{
				"key": "1be59f10-d126-4f56-a41d-cc5bd803a520",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 194
			},
			{
				"key": "da36e0f3-7deb-4d0a-9987-cfa089a4cd7b",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 222
			},
			{
				"key": "58f8f460-6f6a-409b-9b23-9946869738f1",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 242
			},
			{
				"key": "8e4ad941-35e2-48ef-89f5-1aa4c6b3d854",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 277
			},
			{
				"key": "039b93f1-d8c6-45a7-a6e3-ccd541660493",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 305
			},
			{
				"key": "21697323-af9c-4aa5-a207-914dad082f71",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 322
			},
			{
				"key": "d40e113d-07e3-4103-ad6a-b8949a14bb6e",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 339
			},
			{
				"key": "199bcbc9-ee2e-409a-8a3d-8dc475f47584",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 356
			},
			{
				"key": "e27fcc87-440c-4317-9c6e-2f9201dcbfda",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 366
			},
			{
				"key": "28bf9d96-1f4a-4fcc-8e4d-862e7de46b43",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 393
			},
			{
				"key": "e419ff00-cbc0-4f34-9e52-5106728ac654",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 419
			},
			{
				"key": "e67eab02-830e-41e5-9e23-064030cb2887",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 443
			},
			{
				"key": "993e920c-8a40-4386-9de8-66bb8bd4e5bd",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 470
			},
			{
				"key": "e4aa199b-ef4b-414a-95da-bc91f16dcf7a",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 513
			},
			{
				"key": "00003958-f092-4c46-95ff-6af2e67b3d39",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 528
			},
			{
				"key": "c9cf58d7-b110-4422-ab9b-c4f16ca0feb8",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 578
			},
			{
				"key": "ef163787-076e-4e98-9b60-1a05cc12d765",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 601
			},
			{
				"key": "f5402987-880e-4334-a3e6-37979100a0af",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 613
			},
			{
				"key": "fad4d9ca-f3bf-4cfd-88af-32148eb1d0ed",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 677
			},
			{
				"key": "b2241d38-2cc6-4e56-9feb-8320513d29a8",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 708
			},
			{
				"key": "883ffdb6-e684-44f4-8259-90c290732a10",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 768
			},
			{
				"key": "a0e01b7c-01fd-4283-9b48-7adf1208a358",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 804
			},
			{
				"key": "c9418e9a-59ad-4a2e-ac0f-0f0141949610",
				"status": "TO_REVIEW",
				"message": "Make sure allowing safe and unsafe HTTP methods is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 854
			},
			{
				"key": "2e1e1d6b-9189-4e05-965b-6336e61f0a86",
				"status": "TO_REVIEW",
				"message": "Make sure disabling CSRF protection is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 28
			},
			{
				"key": "6ac52b8b-71b1-45d4-9e2c-d9031300099c",
				"status": "TO_REVIEW",
				"message": "Make sure disabling auto-escaping feature is safe here.",
				"vulnerabilityProbability": "HIGH",
				"component": "Juice-Shop:app.py",
				"line": 40
			},
			{
				"key": "088585a8-f74b-435d-a329-f132677b8e87",
				"status": "TO_REVIEW",
				"message": "Copying recursively might inadvertently add sensitive data to the container. Make sure it is safe here.",
				"vulnerabilityProbability": "MEDIUM",
				"component": "Juice-Shop:Dockerfile",
				"line": 4
			},
			{
				"key": "20576177-85d0-401c-83b7-c026e2fbd707",
				"status": "TO_REVIEW",
				"message": "The \"python\" image runs with \"root\" as the default user. Make sure it is safe here.",
				"vulnerabilityProbability": "MEDIUM",
				"component": "Juice-Shop:Dockerfile",
				"line": 1
			},
			{
				"key": "87feee10-83e6-4c51-af0d-a3d732dddeda",
				"status": "TO_REVIEW",
				"message": "Make sure that using this pseudorandom number generator is safe here.",
				"vulnerabilityProbability": "MEDIUM",
				"component": "Juice-Shop:app.py",
				"line": 760
			},
			{
				"key": "44f801d3-cdf8-4e9c-8440-2e1e9d4810e5",
				"status": "TO_REVIEW",
				"message": "Make sure creating this cookie without the \"secure\" flag is safe.",
				"vulnerabilityProbability": "LOW",
				"component": "Juice-Shop:app.py",
				"line": 848
			},
			{
				"key": "6b76a546-67ca-446d-bbc7-560177d0cd9c",
				"status": "TO_REVIEW",
				"message": "Make sure creating this cookie without the \"secure\" flag is safe.",
				"vulnerabilityProbability": "LOW",
				"component": "Juice-Shop:app.py",
				"line": 880
			},
			{
				"key": "bc61b6d9-d4e4-4bf4-ad83-e9007caf5b78",
				"status": "TO_REVIEW",
				"message": "Make sure creating this cookie without the \"secure\" flag is safe.",
				"vulnerabilityProbability": "LOW",
				"component": "Juice-Shop:app.py",
				"line": 898
			},
			{
				"key": "80e63b0e-de50-4131-9774-35b5cf765526",
				"status": "TO_REVIEW",
				"message": "Make sure this debug feature is deactivated before delivering the code in production.",
				"vulnerabilityProbability": "LOW",
				"component": "Juice-Shop:app.py",
				"line": 913
			},
			{
				"key": "0020616e-aba0-4fb0-96f7-8db814f00cff",
				"status": "TO_REVIEW",
				"message": "Make sure that hashing data is safe here.",
				"vulnerabilityProbability": "LOW",
				"component": "Juice-Shop:helper/db_manager.py",
				"line": 47
			},
			{
				"key": "8a61c477-a497-42f5-ba8d-3b91bfe97355",
				"status": "TO_REVIEW",
				"message": "Make sure that hashing data is safe here.",
				"vulnerabilityProbability": "LOW",
				"component": "Juice-Shop:helper/db_manager.py",
				"line": 55
			},
			{
				"key": "9c210d2d-87ae-4aca-9ba9-228661f3f4dc",
				"status": "TO_REVIEW",
				"message": "Make sure that hashing data is safe here.",
				"vulnerabilityProbability": "LOW",
				"component": "Juice-Shop:helper/mongodb_manager.py",
				"line": 45
			},
			{
				"key": "49af12ef-19ce-4e3e-9d00-05a5e50fb7f3",
				"status": "TO_REVIEW",
				"message": "Make sure that hashing data is safe here.",
				"vulnerabilityProbability": "LOW",
				"component": "Juice-Shop:vulnerabilities/SQLi.py",
				"line": 151
			},
			{
				"key": "6475e733-c285-44e9-ade3-cc0772a99670",
				"status": "TO_REVIEW",
				"message": "Make sure creating this cookie without the \"HttpOnly\" flag is safe.",
				"vulnerabilityProbability": "LOW",
				"component": "Juice-Shop:app.py",
				"line": 848
			},
			{
				"key": "af548c1b-9249-4079-a608-032a99ee8b87",
				"status": "TO_REVIEW",
				"message": "Make sure creating this cookie without the \"HttpOnly\" flag is safe.",
				"vulnerabilityProbability": "LOW",
				"component": "Juice-Shop:app.py",
				"line": 880
			},
			{
				"key": "d97c82e1-8200-4012-a0b9-3f3c052f1d16",
				"status": "TO_REVIEW",
				"message": "Make sure creating this cookie without the \"HttpOnly\" flag is safe.",
				"vulnerabilityProbability": "LOW",
				"component": "Juice-Shop:app.py",
				"line": 898
			},
			{
				"key": "c5f45e97-a2f8-4612-a52b-8bab22ab46ca",
				"status": "TO_REVIEW",
				"message": "Make sure not using resource integrity feature is safe here.",
				"vulnerabilityProbability": "LOW",
				"component": "Juice-Shop:templates/dashboard_layout.html",
				"line": 20
			},
			{
				"key": "9e1c0935-20ea-4f89-8466-9b398057b70c",
				"status": "TO_REVIEW",
				"message": "Make sure not using resource integrity feature is safe here.",
				"vulnerabilityProbability": "LOW",
				"component": "Juice-Shop:templates/dashboard_layout.html",
				"line": 21
			},
			{
				"key": "c635e057-1939-4c54-beab-3baa101d097e",
				"status": "TO_REVIEW",
				"message": "Make sure not using resource integrity feature is safe here.",
				"vulnerabilityProbability": "LOW",
				"component": "Juice-Shop:templates/vulnerabilities/xml-external-entities.html",
				"line": 24
			}
		]
	}
}
